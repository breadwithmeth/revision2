
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Warehouse
 * 
 */
export type Warehouse = $Result.DefaultSelection<Prisma.$WarehousePayload>
/**
 * Model InventoryDocument
 * 
 */
export type InventoryDocument = $Result.DefaultSelection<Prisma.$InventoryDocumentPayload>
/**
 * Model InventoryItem
 * 
 */
export type InventoryItem = $Result.DefaultSelection<Prisma.$InventoryItemPayload>
/**
 * Model InventoryItemBarcode
 * 
 */
export type InventoryItemBarcode = $Result.DefaultSelection<Prisma.$InventoryItemBarcodePayload>
/**
 * Model InventoryItemChange
 * 
 */
export type InventoryItemChange = $Result.DefaultSelection<Prisma.$InventoryItemChangePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const DocStatus: {
  NEW: 'NEW',
  IMPORTED: 'IMPORTED',
  REVISED: 'REVISED',
  EXPORTED: 'EXPORTED',
  EXPORT: 'EXPORT'
};

export type DocStatus = (typeof DocStatus)[keyof typeof DocStatus]

}

export type DocStatus = $Enums.DocStatus

export const DocStatus: typeof $Enums.DocStatus

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Warehouses
 * const warehouses = await prisma.warehouse.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Warehouses
   * const warehouses = await prisma.warehouse.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.warehouse`: Exposes CRUD operations for the **Warehouse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Warehouses
    * const warehouses = await prisma.warehouse.findMany()
    * ```
    */
  get warehouse(): Prisma.WarehouseDelegate<ExtArgs>;

  /**
   * `prisma.inventoryDocument`: Exposes CRUD operations for the **InventoryDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryDocuments
    * const inventoryDocuments = await prisma.inventoryDocument.findMany()
    * ```
    */
  get inventoryDocument(): Prisma.InventoryDocumentDelegate<ExtArgs>;

  /**
   * `prisma.inventoryItem`: Exposes CRUD operations for the **InventoryItem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryItems
    * const inventoryItems = await prisma.inventoryItem.findMany()
    * ```
    */
  get inventoryItem(): Prisma.InventoryItemDelegate<ExtArgs>;

  /**
   * `prisma.inventoryItemBarcode`: Exposes CRUD operations for the **InventoryItemBarcode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryItemBarcodes
    * const inventoryItemBarcodes = await prisma.inventoryItemBarcode.findMany()
    * ```
    */
  get inventoryItemBarcode(): Prisma.InventoryItemBarcodeDelegate<ExtArgs>;

  /**
   * `prisma.inventoryItemChange`: Exposes CRUD operations for the **InventoryItemChange** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InventoryItemChanges
    * const inventoryItemChanges = await prisma.inventoryItemChange.findMany()
    * ```
    */
  get inventoryItemChange(): Prisma.InventoryItemChangeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Warehouse: 'Warehouse',
    InventoryDocument: 'InventoryDocument',
    InventoryItem: 'InventoryItem',
    InventoryItemBarcode: 'InventoryItemBarcode',
    InventoryItemChange: 'InventoryItemChange'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "warehouse" | "inventoryDocument" | "inventoryItem" | "inventoryItemBarcode" | "inventoryItemChange"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Warehouse: {
        payload: Prisma.$WarehousePayload<ExtArgs>
        fields: Prisma.WarehouseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WarehouseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WarehouseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          findFirst: {
            args: Prisma.WarehouseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WarehouseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          findMany: {
            args: Prisma.WarehouseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>[]
          }
          create: {
            args: Prisma.WarehouseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          createMany: {
            args: Prisma.WarehouseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.WarehouseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          update: {
            args: Prisma.WarehouseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          deleteMany: {
            args: Prisma.WarehouseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WarehouseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WarehouseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WarehousePayload>
          }
          aggregate: {
            args: Prisma.WarehouseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWarehouse>
          }
          groupBy: {
            args: Prisma.WarehouseGroupByArgs<ExtArgs>
            result: $Utils.Optional<WarehouseGroupByOutputType>[]
          }
          count: {
            args: Prisma.WarehouseCountArgs<ExtArgs>
            result: $Utils.Optional<WarehouseCountAggregateOutputType> | number
          }
        }
      }
      InventoryDocument: {
        payload: Prisma.$InventoryDocumentPayload<ExtArgs>
        fields: Prisma.InventoryDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload>
          }
          findFirst: {
            args: Prisma.InventoryDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload>
          }
          findMany: {
            args: Prisma.InventoryDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload>[]
          }
          create: {
            args: Prisma.InventoryDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload>
          }
          createMany: {
            args: Prisma.InventoryDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload>
          }
          update: {
            args: Prisma.InventoryDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload>
          }
          deleteMany: {
            args: Prisma.InventoryDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryDocumentPayload>
          }
          aggregate: {
            args: Prisma.InventoryDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryDocument>
          }
          groupBy: {
            args: Prisma.InventoryDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryDocumentCountAggregateOutputType> | number
          }
        }
      }
      InventoryItem: {
        payload: Prisma.$InventoryItemPayload<ExtArgs>
        fields: Prisma.InventoryItemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryItemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryItemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findFirst: {
            args: Prisma.InventoryItemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryItemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          findMany: {
            args: Prisma.InventoryItemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>[]
          }
          create: {
            args: Prisma.InventoryItemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          createMany: {
            args: Prisma.InventoryItemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryItemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          update: {
            args: Prisma.InventoryItemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          deleteMany: {
            args: Prisma.InventoryItemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryItemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryItemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemPayload>
          }
          aggregate: {
            args: Prisma.InventoryItemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryItem>
          }
          groupBy: {
            args: Prisma.InventoryItemGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryItemCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemCountAggregateOutputType> | number
          }
        }
      }
      InventoryItemBarcode: {
        payload: Prisma.$InventoryItemBarcodePayload<ExtArgs>
        fields: Prisma.InventoryItemBarcodeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryItemBarcodeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryItemBarcodeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload>
          }
          findFirst: {
            args: Prisma.InventoryItemBarcodeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryItemBarcodeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload>
          }
          findMany: {
            args: Prisma.InventoryItemBarcodeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload>[]
          }
          create: {
            args: Prisma.InventoryItemBarcodeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload>
          }
          createMany: {
            args: Prisma.InventoryItemBarcodeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryItemBarcodeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload>
          }
          update: {
            args: Prisma.InventoryItemBarcodeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload>
          }
          deleteMany: {
            args: Prisma.InventoryItemBarcodeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryItemBarcodeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryItemBarcodeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemBarcodePayload>
          }
          aggregate: {
            args: Prisma.InventoryItemBarcodeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryItemBarcode>
          }
          groupBy: {
            args: Prisma.InventoryItemBarcodeGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemBarcodeGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryItemBarcodeCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemBarcodeCountAggregateOutputType> | number
          }
        }
      }
      InventoryItemChange: {
        payload: Prisma.$InventoryItemChangePayload<ExtArgs>
        fields: Prisma.InventoryItemChangeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InventoryItemChangeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InventoryItemChangeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload>
          }
          findFirst: {
            args: Prisma.InventoryItemChangeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InventoryItemChangeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload>
          }
          findMany: {
            args: Prisma.InventoryItemChangeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload>[]
          }
          create: {
            args: Prisma.InventoryItemChangeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload>
          }
          createMany: {
            args: Prisma.InventoryItemChangeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InventoryItemChangeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload>
          }
          update: {
            args: Prisma.InventoryItemChangeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload>
          }
          deleteMany: {
            args: Prisma.InventoryItemChangeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InventoryItemChangeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InventoryItemChangeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InventoryItemChangePayload>
          }
          aggregate: {
            args: Prisma.InventoryItemChangeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventoryItemChange>
          }
          groupBy: {
            args: Prisma.InventoryItemChangeGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemChangeGroupByOutputType>[]
          }
          count: {
            args: Prisma.InventoryItemChangeCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryItemChangeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type WarehouseCountOutputType
   */

  export type WarehouseCountOutputType = {
    docs: number
  }

  export type WarehouseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    docs?: boolean | WarehouseCountOutputTypeCountDocsArgs
  }

  // Custom InputTypes
  /**
   * WarehouseCountOutputType without action
   */
  export type WarehouseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WarehouseCountOutputType
     */
    select?: WarehouseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WarehouseCountOutputType without action
   */
  export type WarehouseCountOutputTypeCountDocsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryDocumentWhereInput
  }


  /**
   * Count Type InventoryDocumentCountOutputType
   */

  export type InventoryDocumentCountOutputType = {
    items: number
    barcodes: number
    changes: number
  }

  export type InventoryDocumentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    items?: boolean | InventoryDocumentCountOutputTypeCountItemsArgs
    barcodes?: boolean | InventoryDocumentCountOutputTypeCountBarcodesArgs
    changes?: boolean | InventoryDocumentCountOutputTypeCountChangesArgs
  }

  // Custom InputTypes
  /**
   * InventoryDocumentCountOutputType without action
   */
  export type InventoryDocumentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocumentCountOutputType
     */
    select?: InventoryDocumentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryDocumentCountOutputType without action
   */
  export type InventoryDocumentCountOutputTypeCountItemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
  }

  /**
   * InventoryDocumentCountOutputType without action
   */
  export type InventoryDocumentCountOutputTypeCountBarcodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemBarcodeWhereInput
  }

  /**
   * InventoryDocumentCountOutputType without action
   */
  export type InventoryDocumentCountOutputTypeCountChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemChangeWhereInput
  }


  /**
   * Count Type InventoryItemCountOutputType
   */

  export type InventoryItemCountOutputType = {
    barcodes: number
    changes: number
  }

  export type InventoryItemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    barcodes?: boolean | InventoryItemCountOutputTypeCountBarcodesArgs
    changes?: boolean | InventoryItemCountOutputTypeCountChangesArgs
  }

  // Custom InputTypes
  /**
   * InventoryItemCountOutputType without action
   */
  export type InventoryItemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemCountOutputType
     */
    select?: InventoryItemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryItemCountOutputType without action
   */
  export type InventoryItemCountOutputTypeCountBarcodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemBarcodeWhereInput
  }

  /**
   * InventoryItemCountOutputType without action
   */
  export type InventoryItemCountOutputTypeCountChangesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemChangeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Warehouse
   */

  export type AggregateWarehouse = {
    _count: WarehouseCountAggregateOutputType | null
    _min: WarehouseMinAggregateOutputType | null
    _max: WarehouseMaxAggregateOutputType | null
  }

  export type WarehouseMinAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
  }

  export type WarehouseMaxAggregateOutputType = {
    id: string | null
    code: string | null
    name: string | null
  }

  export type WarehouseCountAggregateOutputType = {
    id: number
    code: number
    name: number
    _all: number
  }


  export type WarehouseMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
  }

  export type WarehouseMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
  }

  export type WarehouseCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    _all?: true
  }

  export type WarehouseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warehouse to aggregate.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Warehouses
    **/
    _count?: true | WarehouseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WarehouseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WarehouseMaxAggregateInputType
  }

  export type GetWarehouseAggregateType<T extends WarehouseAggregateArgs> = {
        [P in keyof T & keyof AggregateWarehouse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWarehouse[P]>
      : GetScalarType<T[P], AggregateWarehouse[P]>
  }




  export type WarehouseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WarehouseWhereInput
    orderBy?: WarehouseOrderByWithAggregationInput | WarehouseOrderByWithAggregationInput[]
    by: WarehouseScalarFieldEnum[] | WarehouseScalarFieldEnum
    having?: WarehouseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WarehouseCountAggregateInputType | true
    _min?: WarehouseMinAggregateInputType
    _max?: WarehouseMaxAggregateInputType
  }

  export type WarehouseGroupByOutputType = {
    id: string
    code: string
    name: string
    _count: WarehouseCountAggregateOutputType | null
    _min: WarehouseMinAggregateOutputType | null
    _max: WarehouseMaxAggregateOutputType | null
  }

  type GetWarehouseGroupByPayload<T extends WarehouseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WarehouseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WarehouseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WarehouseGroupByOutputType[P]>
            : GetScalarType<T[P], WarehouseGroupByOutputType[P]>
        }
      >
    >


  export type WarehouseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    docs?: boolean | Warehouse$docsArgs<ExtArgs>
    _count?: boolean | WarehouseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["warehouse"]>


  export type WarehouseSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
  }

  export type WarehouseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    docs?: boolean | Warehouse$docsArgs<ExtArgs>
    _count?: boolean | WarehouseCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $WarehousePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Warehouse"
    objects: {
      docs: Prisma.$InventoryDocumentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      code: string
      name: string
    }, ExtArgs["result"]["warehouse"]>
    composites: {}
  }

  type WarehouseGetPayload<S extends boolean | null | undefined | WarehouseDefaultArgs> = $Result.GetResult<Prisma.$WarehousePayload, S>

  type WarehouseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WarehouseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WarehouseCountAggregateInputType | true
    }

  export interface WarehouseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Warehouse'], meta: { name: 'Warehouse' } }
    /**
     * Find zero or one Warehouse that matches the filter.
     * @param {WarehouseFindUniqueArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WarehouseFindUniqueArgs>(args: SelectSubset<T, WarehouseFindUniqueArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Warehouse that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WarehouseFindUniqueOrThrowArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WarehouseFindUniqueOrThrowArgs>(args: SelectSubset<T, WarehouseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Warehouse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindFirstArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WarehouseFindFirstArgs>(args?: SelectSubset<T, WarehouseFindFirstArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Warehouse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindFirstOrThrowArgs} args - Arguments to find a Warehouse
     * @example
     * // Get one Warehouse
     * const warehouse = await prisma.warehouse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WarehouseFindFirstOrThrowArgs>(args?: SelectSubset<T, WarehouseFindFirstOrThrowArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Warehouses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Warehouses
     * const warehouses = await prisma.warehouse.findMany()
     * 
     * // Get first 10 Warehouses
     * const warehouses = await prisma.warehouse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const warehouseWithIdOnly = await prisma.warehouse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WarehouseFindManyArgs>(args?: SelectSubset<T, WarehouseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Warehouse.
     * @param {WarehouseCreateArgs} args - Arguments to create a Warehouse.
     * @example
     * // Create one Warehouse
     * const Warehouse = await prisma.warehouse.create({
     *   data: {
     *     // ... data to create a Warehouse
     *   }
     * })
     * 
     */
    create<T extends WarehouseCreateArgs>(args: SelectSubset<T, WarehouseCreateArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Warehouses.
     * @param {WarehouseCreateManyArgs} args - Arguments to create many Warehouses.
     * @example
     * // Create many Warehouses
     * const warehouse = await prisma.warehouse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WarehouseCreateManyArgs>(args?: SelectSubset<T, WarehouseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Warehouse.
     * @param {WarehouseDeleteArgs} args - Arguments to delete one Warehouse.
     * @example
     * // Delete one Warehouse
     * const Warehouse = await prisma.warehouse.delete({
     *   where: {
     *     // ... filter to delete one Warehouse
     *   }
     * })
     * 
     */
    delete<T extends WarehouseDeleteArgs>(args: SelectSubset<T, WarehouseDeleteArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Warehouse.
     * @param {WarehouseUpdateArgs} args - Arguments to update one Warehouse.
     * @example
     * // Update one Warehouse
     * const warehouse = await prisma.warehouse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WarehouseUpdateArgs>(args: SelectSubset<T, WarehouseUpdateArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Warehouses.
     * @param {WarehouseDeleteManyArgs} args - Arguments to filter Warehouses to delete.
     * @example
     * // Delete a few Warehouses
     * const { count } = await prisma.warehouse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WarehouseDeleteManyArgs>(args?: SelectSubset<T, WarehouseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Warehouses
     * const warehouse = await prisma.warehouse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WarehouseUpdateManyArgs>(args: SelectSubset<T, WarehouseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Warehouse.
     * @param {WarehouseUpsertArgs} args - Arguments to update or create a Warehouse.
     * @example
     * // Update or create a Warehouse
     * const warehouse = await prisma.warehouse.upsert({
     *   create: {
     *     // ... data to create a Warehouse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Warehouse we want to update
     *   }
     * })
     */
    upsert<T extends WarehouseUpsertArgs>(args: SelectSubset<T, WarehouseUpsertArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Warehouses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseCountArgs} args - Arguments to filter Warehouses to count.
     * @example
     * // Count the number of Warehouses
     * const count = await prisma.warehouse.count({
     *   where: {
     *     // ... the filter for the Warehouses we want to count
     *   }
     * })
    **/
    count<T extends WarehouseCountArgs>(
      args?: Subset<T, WarehouseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WarehouseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Warehouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WarehouseAggregateArgs>(args: Subset<T, WarehouseAggregateArgs>): Prisma.PrismaPromise<GetWarehouseAggregateType<T>>

    /**
     * Group by Warehouse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WarehouseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WarehouseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WarehouseGroupByArgs['orderBy'] }
        : { orderBy?: WarehouseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WarehouseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWarehouseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Warehouse model
   */
  readonly fields: WarehouseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Warehouse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WarehouseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    docs<T extends Warehouse$docsArgs<ExtArgs> = {}>(args?: Subset<T, Warehouse$docsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Warehouse model
   */ 
  interface WarehouseFieldRefs {
    readonly id: FieldRef<"Warehouse", 'String'>
    readonly code: FieldRef<"Warehouse", 'String'>
    readonly name: FieldRef<"Warehouse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Warehouse findUnique
   */
  export type WarehouseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse findUniqueOrThrow
   */
  export type WarehouseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse findFirst
   */
  export type WarehouseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warehouses.
     */
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse findFirstOrThrow
   */
  export type WarehouseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouse to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Warehouses.
     */
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse findMany
   */
  export type WarehouseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter, which Warehouses to fetch.
     */
    where?: WarehouseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Warehouses to fetch.
     */
    orderBy?: WarehouseOrderByWithRelationInput | WarehouseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Warehouses.
     */
    cursor?: WarehouseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Warehouses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Warehouses.
     */
    skip?: number
    distinct?: WarehouseScalarFieldEnum | WarehouseScalarFieldEnum[]
  }

  /**
   * Warehouse create
   */
  export type WarehouseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The data needed to create a Warehouse.
     */
    data: XOR<WarehouseCreateInput, WarehouseUncheckedCreateInput>
  }

  /**
   * Warehouse createMany
   */
  export type WarehouseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Warehouses.
     */
    data: WarehouseCreateManyInput | WarehouseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Warehouse update
   */
  export type WarehouseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The data needed to update a Warehouse.
     */
    data: XOR<WarehouseUpdateInput, WarehouseUncheckedUpdateInput>
    /**
     * Choose, which Warehouse to update.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse updateMany
   */
  export type WarehouseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Warehouses.
     */
    data: XOR<WarehouseUpdateManyMutationInput, WarehouseUncheckedUpdateManyInput>
    /**
     * Filter which Warehouses to update
     */
    where?: WarehouseWhereInput
  }

  /**
   * Warehouse upsert
   */
  export type WarehouseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * The filter to search for the Warehouse to update in case it exists.
     */
    where: WarehouseWhereUniqueInput
    /**
     * In case the Warehouse found by the `where` argument doesn't exist, create a new Warehouse with this data.
     */
    create: XOR<WarehouseCreateInput, WarehouseUncheckedCreateInput>
    /**
     * In case the Warehouse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WarehouseUpdateInput, WarehouseUncheckedUpdateInput>
  }

  /**
   * Warehouse delete
   */
  export type WarehouseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
    /**
     * Filter which Warehouse to delete.
     */
    where: WarehouseWhereUniqueInput
  }

  /**
   * Warehouse deleteMany
   */
  export type WarehouseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Warehouses to delete
     */
    where?: WarehouseWhereInput
  }

  /**
   * Warehouse.docs
   */
  export type Warehouse$docsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    where?: InventoryDocumentWhereInput
    orderBy?: InventoryDocumentOrderByWithRelationInput | InventoryDocumentOrderByWithRelationInput[]
    cursor?: InventoryDocumentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryDocumentScalarFieldEnum | InventoryDocumentScalarFieldEnum[]
  }

  /**
   * Warehouse without action
   */
  export type WarehouseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Warehouse
     */
    select?: WarehouseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WarehouseInclude<ExtArgs> | null
  }


  /**
   * Model InventoryDocument
   */

  export type AggregateInventoryDocument = {
    _count: InventoryDocumentCountAggregateOutputType | null
    _avg: InventoryDocumentAvgAggregateOutputType | null
    _sum: InventoryDocumentSumAggregateOutputType | null
    _min: InventoryDocumentMinAggregateOutputType | null
    _max: InventoryDocumentMaxAggregateOutputType | null
  }

  export type InventoryDocumentAvgAggregateOutputType = {
    version: number | null
  }

  export type InventoryDocumentSumAggregateOutputType = {
    version: number | null
  }

  export type InventoryDocumentMinAggregateOutputType = {
    id: string | null
    externalId: string | null
    onecNumber: string | null
    onecDate: Date | null
    warehouseId: string | null
    warehouseCode: string | null
    status: $Enums.DocStatus | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryDocumentMaxAggregateOutputType = {
    id: string | null
    externalId: string | null
    onecNumber: string | null
    onecDate: Date | null
    warehouseId: string | null
    warehouseCode: string | null
    status: $Enums.DocStatus | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryDocumentCountAggregateOutputType = {
    id: number
    externalId: number
    onecNumber: number
    onecDate: number
    warehouseId: number
    warehouseCode: number
    status: number
    version: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryDocumentAvgAggregateInputType = {
    version?: true
  }

  export type InventoryDocumentSumAggregateInputType = {
    version?: true
  }

  export type InventoryDocumentMinAggregateInputType = {
    id?: true
    externalId?: true
    onecNumber?: true
    onecDate?: true
    warehouseId?: true
    warehouseCode?: true
    status?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryDocumentMaxAggregateInputType = {
    id?: true
    externalId?: true
    onecNumber?: true
    onecDate?: true
    warehouseId?: true
    warehouseCode?: true
    status?: true
    version?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryDocumentCountAggregateInputType = {
    id?: true
    externalId?: true
    onecNumber?: true
    onecDate?: true
    warehouseId?: true
    warehouseCode?: true
    status?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryDocument to aggregate.
     */
    where?: InventoryDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryDocuments to fetch.
     */
    orderBy?: InventoryDocumentOrderByWithRelationInput | InventoryDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryDocuments
    **/
    _count?: true | InventoryDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryDocumentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryDocumentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryDocumentMaxAggregateInputType
  }

  export type GetInventoryDocumentAggregateType<T extends InventoryDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryDocument[P]>
      : GetScalarType<T[P], AggregateInventoryDocument[P]>
  }




  export type InventoryDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryDocumentWhereInput
    orderBy?: InventoryDocumentOrderByWithAggregationInput | InventoryDocumentOrderByWithAggregationInput[]
    by: InventoryDocumentScalarFieldEnum[] | InventoryDocumentScalarFieldEnum
    having?: InventoryDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryDocumentCountAggregateInputType | true
    _avg?: InventoryDocumentAvgAggregateInputType
    _sum?: InventoryDocumentSumAggregateInputType
    _min?: InventoryDocumentMinAggregateInputType
    _max?: InventoryDocumentMaxAggregateInputType
  }

  export type InventoryDocumentGroupByOutputType = {
    id: string
    externalId: string
    onecNumber: string
    onecDate: Date
    warehouseId: string
    warehouseCode: string
    status: $Enums.DocStatus
    version: number
    createdAt: Date
    updatedAt: Date
    _count: InventoryDocumentCountAggregateOutputType | null
    _avg: InventoryDocumentAvgAggregateOutputType | null
    _sum: InventoryDocumentSumAggregateOutputType | null
    _min: InventoryDocumentMinAggregateOutputType | null
    _max: InventoryDocumentMaxAggregateOutputType | null
  }

  type GetInventoryDocumentGroupByPayload<T extends InventoryDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryDocumentGroupByOutputType[P]>
        }
      >
    >


  export type InventoryDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    externalId?: boolean
    onecNumber?: boolean
    onecDate?: boolean
    warehouseId?: boolean
    warehouseCode?: boolean
    status?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
    items?: boolean | InventoryDocument$itemsArgs<ExtArgs>
    barcodes?: boolean | InventoryDocument$barcodesArgs<ExtArgs>
    changes?: boolean | InventoryDocument$changesArgs<ExtArgs>
    _count?: boolean | InventoryDocumentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryDocument"]>


  export type InventoryDocumentSelectScalar = {
    id?: boolean
    externalId?: boolean
    onecNumber?: boolean
    onecDate?: boolean
    warehouseId?: boolean
    warehouseCode?: boolean
    status?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    warehouse?: boolean | WarehouseDefaultArgs<ExtArgs>
    items?: boolean | InventoryDocument$itemsArgs<ExtArgs>
    barcodes?: boolean | InventoryDocument$barcodesArgs<ExtArgs>
    changes?: boolean | InventoryDocument$changesArgs<ExtArgs>
    _count?: boolean | InventoryDocumentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $InventoryDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryDocument"
    objects: {
      warehouse: Prisma.$WarehousePayload<ExtArgs>
      items: Prisma.$InventoryItemPayload<ExtArgs>[]
      barcodes: Prisma.$InventoryItemBarcodePayload<ExtArgs>[]
      changes: Prisma.$InventoryItemChangePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      externalId: string
      onecNumber: string
      onecDate: Date
      warehouseId: string
      warehouseCode: string
      status: $Enums.DocStatus
      version: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventoryDocument"]>
    composites: {}
  }

  type InventoryDocumentGetPayload<S extends boolean | null | undefined | InventoryDocumentDefaultArgs> = $Result.GetResult<Prisma.$InventoryDocumentPayload, S>

  type InventoryDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryDocumentCountAggregateInputType | true
    }

  export interface InventoryDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryDocument'], meta: { name: 'InventoryDocument' } }
    /**
     * Find zero or one InventoryDocument that matches the filter.
     * @param {InventoryDocumentFindUniqueArgs} args - Arguments to find a InventoryDocument
     * @example
     * // Get one InventoryDocument
     * const inventoryDocument = await prisma.inventoryDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryDocumentFindUniqueArgs>(args: SelectSubset<T, InventoryDocumentFindUniqueArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryDocumentFindUniqueOrThrowArgs} args - Arguments to find a InventoryDocument
     * @example
     * // Get one InventoryDocument
     * const inventoryDocument = await prisma.inventoryDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryDocumentFindFirstArgs} args - Arguments to find a InventoryDocument
     * @example
     * // Get one InventoryDocument
     * const inventoryDocument = await prisma.inventoryDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryDocumentFindFirstArgs>(args?: SelectSubset<T, InventoryDocumentFindFirstArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryDocumentFindFirstOrThrowArgs} args - Arguments to find a InventoryDocument
     * @example
     * // Get one InventoryDocument
     * const inventoryDocument = await prisma.inventoryDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryDocuments
     * const inventoryDocuments = await prisma.inventoryDocument.findMany()
     * 
     * // Get first 10 InventoryDocuments
     * const inventoryDocuments = await prisma.inventoryDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryDocumentWithIdOnly = await prisma.inventoryDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryDocumentFindManyArgs>(args?: SelectSubset<T, InventoryDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryDocument.
     * @param {InventoryDocumentCreateArgs} args - Arguments to create a InventoryDocument.
     * @example
     * // Create one InventoryDocument
     * const InventoryDocument = await prisma.inventoryDocument.create({
     *   data: {
     *     // ... data to create a InventoryDocument
     *   }
     * })
     * 
     */
    create<T extends InventoryDocumentCreateArgs>(args: SelectSubset<T, InventoryDocumentCreateArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryDocuments.
     * @param {InventoryDocumentCreateManyArgs} args - Arguments to create many InventoryDocuments.
     * @example
     * // Create many InventoryDocuments
     * const inventoryDocument = await prisma.inventoryDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryDocumentCreateManyArgs>(args?: SelectSubset<T, InventoryDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InventoryDocument.
     * @param {InventoryDocumentDeleteArgs} args - Arguments to delete one InventoryDocument.
     * @example
     * // Delete one InventoryDocument
     * const InventoryDocument = await prisma.inventoryDocument.delete({
     *   where: {
     *     // ... filter to delete one InventoryDocument
     *   }
     * })
     * 
     */
    delete<T extends InventoryDocumentDeleteArgs>(args: SelectSubset<T, InventoryDocumentDeleteArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryDocument.
     * @param {InventoryDocumentUpdateArgs} args - Arguments to update one InventoryDocument.
     * @example
     * // Update one InventoryDocument
     * const inventoryDocument = await prisma.inventoryDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryDocumentUpdateArgs>(args: SelectSubset<T, InventoryDocumentUpdateArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryDocuments.
     * @param {InventoryDocumentDeleteManyArgs} args - Arguments to filter InventoryDocuments to delete.
     * @example
     * // Delete a few InventoryDocuments
     * const { count } = await prisma.inventoryDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryDocumentDeleteManyArgs>(args?: SelectSubset<T, InventoryDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryDocuments
     * const inventoryDocument = await prisma.inventoryDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryDocumentUpdateManyArgs>(args: SelectSubset<T, InventoryDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryDocument.
     * @param {InventoryDocumentUpsertArgs} args - Arguments to update or create a InventoryDocument.
     * @example
     * // Update or create a InventoryDocument
     * const inventoryDocument = await prisma.inventoryDocument.upsert({
     *   create: {
     *     // ... data to create a InventoryDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryDocument we want to update
     *   }
     * })
     */
    upsert<T extends InventoryDocumentUpsertArgs>(args: SelectSubset<T, InventoryDocumentUpsertArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryDocumentCountArgs} args - Arguments to filter InventoryDocuments to count.
     * @example
     * // Count the number of InventoryDocuments
     * const count = await prisma.inventoryDocument.count({
     *   where: {
     *     // ... the filter for the InventoryDocuments we want to count
     *   }
     * })
    **/
    count<T extends InventoryDocumentCountArgs>(
      args?: Subset<T, InventoryDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryDocumentAggregateArgs>(args: Subset<T, InventoryDocumentAggregateArgs>): Prisma.PrismaPromise<GetInventoryDocumentAggregateType<T>>

    /**
     * Group by InventoryDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryDocumentGroupByArgs['orderBy'] }
        : { orderBy?: InventoryDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryDocument model
   */
  readonly fields: InventoryDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    warehouse<T extends WarehouseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WarehouseDefaultArgs<ExtArgs>>): Prisma__WarehouseClient<$Result.GetResult<Prisma.$WarehousePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    items<T extends InventoryDocument$itemsArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDocument$itemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany"> | Null>
    barcodes<T extends InventoryDocument$barcodesArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDocument$barcodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "findMany"> | Null>
    changes<T extends InventoryDocument$changesArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDocument$changesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryDocument model
   */ 
  interface InventoryDocumentFieldRefs {
    readonly id: FieldRef<"InventoryDocument", 'String'>
    readonly externalId: FieldRef<"InventoryDocument", 'String'>
    readonly onecNumber: FieldRef<"InventoryDocument", 'String'>
    readonly onecDate: FieldRef<"InventoryDocument", 'DateTime'>
    readonly warehouseId: FieldRef<"InventoryDocument", 'String'>
    readonly warehouseCode: FieldRef<"InventoryDocument", 'String'>
    readonly status: FieldRef<"InventoryDocument", 'DocStatus'>
    readonly version: FieldRef<"InventoryDocument", 'Int'>
    readonly createdAt: FieldRef<"InventoryDocument", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryDocument", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryDocument findUnique
   */
  export type InventoryDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * Filter, which InventoryDocument to fetch.
     */
    where: InventoryDocumentWhereUniqueInput
  }

  /**
   * InventoryDocument findUniqueOrThrow
   */
  export type InventoryDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * Filter, which InventoryDocument to fetch.
     */
    where: InventoryDocumentWhereUniqueInput
  }

  /**
   * InventoryDocument findFirst
   */
  export type InventoryDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * Filter, which InventoryDocument to fetch.
     */
    where?: InventoryDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryDocuments to fetch.
     */
    orderBy?: InventoryDocumentOrderByWithRelationInput | InventoryDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryDocuments.
     */
    cursor?: InventoryDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryDocuments.
     */
    distinct?: InventoryDocumentScalarFieldEnum | InventoryDocumentScalarFieldEnum[]
  }

  /**
   * InventoryDocument findFirstOrThrow
   */
  export type InventoryDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * Filter, which InventoryDocument to fetch.
     */
    where?: InventoryDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryDocuments to fetch.
     */
    orderBy?: InventoryDocumentOrderByWithRelationInput | InventoryDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryDocuments.
     */
    cursor?: InventoryDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryDocuments.
     */
    distinct?: InventoryDocumentScalarFieldEnum | InventoryDocumentScalarFieldEnum[]
  }

  /**
   * InventoryDocument findMany
   */
  export type InventoryDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * Filter, which InventoryDocuments to fetch.
     */
    where?: InventoryDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryDocuments to fetch.
     */
    orderBy?: InventoryDocumentOrderByWithRelationInput | InventoryDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryDocuments.
     */
    cursor?: InventoryDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryDocuments.
     */
    skip?: number
    distinct?: InventoryDocumentScalarFieldEnum | InventoryDocumentScalarFieldEnum[]
  }

  /**
   * InventoryDocument create
   */
  export type InventoryDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryDocument.
     */
    data: XOR<InventoryDocumentCreateInput, InventoryDocumentUncheckedCreateInput>
  }

  /**
   * InventoryDocument createMany
   */
  export type InventoryDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryDocuments.
     */
    data: InventoryDocumentCreateManyInput | InventoryDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryDocument update
   */
  export type InventoryDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryDocument.
     */
    data: XOR<InventoryDocumentUpdateInput, InventoryDocumentUncheckedUpdateInput>
    /**
     * Choose, which InventoryDocument to update.
     */
    where: InventoryDocumentWhereUniqueInput
  }

  /**
   * InventoryDocument updateMany
   */
  export type InventoryDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryDocuments.
     */
    data: XOR<InventoryDocumentUpdateManyMutationInput, InventoryDocumentUncheckedUpdateManyInput>
    /**
     * Filter which InventoryDocuments to update
     */
    where?: InventoryDocumentWhereInput
  }

  /**
   * InventoryDocument upsert
   */
  export type InventoryDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryDocument to update in case it exists.
     */
    where: InventoryDocumentWhereUniqueInput
    /**
     * In case the InventoryDocument found by the `where` argument doesn't exist, create a new InventoryDocument with this data.
     */
    create: XOR<InventoryDocumentCreateInput, InventoryDocumentUncheckedCreateInput>
    /**
     * In case the InventoryDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryDocumentUpdateInput, InventoryDocumentUncheckedUpdateInput>
  }

  /**
   * InventoryDocument delete
   */
  export type InventoryDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
    /**
     * Filter which InventoryDocument to delete.
     */
    where: InventoryDocumentWhereUniqueInput
  }

  /**
   * InventoryDocument deleteMany
   */
  export type InventoryDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryDocuments to delete
     */
    where?: InventoryDocumentWhereInput
  }

  /**
   * InventoryDocument.items
   */
  export type InventoryDocument$itemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    cursor?: InventoryItemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryDocument.barcodes
   */
  export type InventoryDocument$barcodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    where?: InventoryItemBarcodeWhereInput
    orderBy?: InventoryItemBarcodeOrderByWithRelationInput | InventoryItemBarcodeOrderByWithRelationInput[]
    cursor?: InventoryItemBarcodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemBarcodeScalarFieldEnum | InventoryItemBarcodeScalarFieldEnum[]
  }

  /**
   * InventoryDocument.changes
   */
  export type InventoryDocument$changesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    where?: InventoryItemChangeWhereInput
    orderBy?: InventoryItemChangeOrderByWithRelationInput | InventoryItemChangeOrderByWithRelationInput[]
    cursor?: InventoryItemChangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemChangeScalarFieldEnum | InventoryItemChangeScalarFieldEnum[]
  }

  /**
   * InventoryDocument without action
   */
  export type InventoryDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryDocument
     */
    select?: InventoryDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryDocumentInclude<ExtArgs> | null
  }


  /**
   * Model InventoryItem
   */

  export type AggregateInventoryItem = {
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  export type InventoryItemAvgAggregateOutputType = {
    qtyFrom1C: Decimal | null
    countedQty: Decimal | null
    correctedQty: Decimal | null
    deltaQty: Decimal | null
  }

  export type InventoryItemSumAggregateOutputType = {
    qtyFrom1C: Decimal | null
    countedQty: Decimal | null
    correctedQty: Decimal | null
    deltaQty: Decimal | null
  }

  export type InventoryItemMinAggregateOutputType = {
    id: string | null
    documentId: string | null
    sku: string | null
    name: string | null
    unit: string | null
    qtyFrom1C: Decimal | null
    countedQty: Decimal | null
    correctedQty: Decimal | null
    deltaQty: Decimal | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryItemMaxAggregateOutputType = {
    id: string | null
    documentId: string | null
    sku: string | null
    name: string | null
    unit: string | null
    qtyFrom1C: Decimal | null
    countedQty: Decimal | null
    correctedQty: Decimal | null
    deltaQty: Decimal | null
    note: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InventoryItemCountAggregateOutputType = {
    id: number
    documentId: number
    sku: number
    name: number
    unit: number
    qtyFrom1C: number
    countedQty: number
    correctedQty: number
    deltaQty: number
    note: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InventoryItemAvgAggregateInputType = {
    qtyFrom1C?: true
    countedQty?: true
    correctedQty?: true
    deltaQty?: true
  }

  export type InventoryItemSumAggregateInputType = {
    qtyFrom1C?: true
    countedQty?: true
    correctedQty?: true
    deltaQty?: true
  }

  export type InventoryItemMinAggregateInputType = {
    id?: true
    documentId?: true
    sku?: true
    name?: true
    unit?: true
    qtyFrom1C?: true
    countedQty?: true
    correctedQty?: true
    deltaQty?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryItemMaxAggregateInputType = {
    id?: true
    documentId?: true
    sku?: true
    name?: true
    unit?: true
    qtyFrom1C?: true
    countedQty?: true
    correctedQty?: true
    deltaQty?: true
    note?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InventoryItemCountAggregateInputType = {
    id?: true
    documentId?: true
    sku?: true
    name?: true
    unit?: true
    qtyFrom1C?: true
    countedQty?: true
    correctedQty?: true
    deltaQty?: true
    note?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InventoryItemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItem to aggregate.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryItems
    **/
    _count?: true | InventoryItemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryItemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryItemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryItemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryItemMaxAggregateInputType
  }

  export type GetInventoryItemAggregateType<T extends InventoryItemAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryItem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryItem[P]>
      : GetScalarType<T[P], AggregateInventoryItem[P]>
  }




  export type InventoryItemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemWhereInput
    orderBy?: InventoryItemOrderByWithAggregationInput | InventoryItemOrderByWithAggregationInput[]
    by: InventoryItemScalarFieldEnum[] | InventoryItemScalarFieldEnum
    having?: InventoryItemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryItemCountAggregateInputType | true
    _avg?: InventoryItemAvgAggregateInputType
    _sum?: InventoryItemSumAggregateInputType
    _min?: InventoryItemMinAggregateInputType
    _max?: InventoryItemMaxAggregateInputType
  }

  export type InventoryItemGroupByOutputType = {
    id: string
    documentId: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal
    countedQty: Decimal | null
    correctedQty: Decimal | null
    deltaQty: Decimal | null
    note: string | null
    createdAt: Date
    updatedAt: Date
    _count: InventoryItemCountAggregateOutputType | null
    _avg: InventoryItemAvgAggregateOutputType | null
    _sum: InventoryItemSumAggregateOutputType | null
    _min: InventoryItemMinAggregateOutputType | null
    _max: InventoryItemMaxAggregateOutputType | null
  }

  type GetInventoryItemGroupByPayload<T extends InventoryItemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryItemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryItemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryItemGroupByOutputType[P]>
        }
      >
    >


  export type InventoryItemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    sku?: boolean
    name?: boolean
    unit?: boolean
    qtyFrom1C?: boolean
    countedQty?: boolean
    correctedQty?: boolean
    deltaQty?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    document?: boolean | InventoryDocumentDefaultArgs<ExtArgs>
    barcodes?: boolean | InventoryItem$barcodesArgs<ExtArgs>
    changes?: boolean | InventoryItem$changesArgs<ExtArgs>
    _count?: boolean | InventoryItemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItem"]>


  export type InventoryItemSelectScalar = {
    id?: boolean
    documentId?: boolean
    sku?: boolean
    name?: boolean
    unit?: boolean
    qtyFrom1C?: boolean
    countedQty?: boolean
    correctedQty?: boolean
    deltaQty?: boolean
    note?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InventoryItemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | InventoryDocumentDefaultArgs<ExtArgs>
    barcodes?: boolean | InventoryItem$barcodesArgs<ExtArgs>
    changes?: boolean | InventoryItem$changesArgs<ExtArgs>
    _count?: boolean | InventoryItemCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $InventoryItemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryItem"
    objects: {
      document: Prisma.$InventoryDocumentPayload<ExtArgs>
      barcodes: Prisma.$InventoryItemBarcodePayload<ExtArgs>[]
      changes: Prisma.$InventoryItemChangePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      documentId: string
      sku: string
      name: string
      unit: string
      qtyFrom1C: Prisma.Decimal
      countedQty: Prisma.Decimal | null
      correctedQty: Prisma.Decimal | null
      deltaQty: Prisma.Decimal | null
      note: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["inventoryItem"]>
    composites: {}
  }

  type InventoryItemGetPayload<S extends boolean | null | undefined | InventoryItemDefaultArgs> = $Result.GetResult<Prisma.$InventoryItemPayload, S>

  type InventoryItemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryItemFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryItemCountAggregateInputType | true
    }

  export interface InventoryItemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryItem'], meta: { name: 'InventoryItem' } }
    /**
     * Find zero or one InventoryItem that matches the filter.
     * @param {InventoryItemFindUniqueArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryItemFindUniqueArgs>(args: SelectSubset<T, InventoryItemFindUniqueArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryItem that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryItemFindUniqueOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryItemFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryItemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryItem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryItemFindFirstArgs>(args?: SelectSubset<T, InventoryItemFindFirstArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryItem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindFirstOrThrowArgs} args - Arguments to find a InventoryItem
     * @example
     * // Get one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryItemFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryItemFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryItems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany()
     * 
     * // Get first 10 InventoryItems
     * const inventoryItems = await prisma.inventoryItem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryItemWithIdOnly = await prisma.inventoryItem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryItemFindManyArgs>(args?: SelectSubset<T, InventoryItemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryItem.
     * @param {InventoryItemCreateArgs} args - Arguments to create a InventoryItem.
     * @example
     * // Create one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.create({
     *   data: {
     *     // ... data to create a InventoryItem
     *   }
     * })
     * 
     */
    create<T extends InventoryItemCreateArgs>(args: SelectSubset<T, InventoryItemCreateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryItems.
     * @param {InventoryItemCreateManyArgs} args - Arguments to create many InventoryItems.
     * @example
     * // Create many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryItemCreateManyArgs>(args?: SelectSubset<T, InventoryItemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InventoryItem.
     * @param {InventoryItemDeleteArgs} args - Arguments to delete one InventoryItem.
     * @example
     * // Delete one InventoryItem
     * const InventoryItem = await prisma.inventoryItem.delete({
     *   where: {
     *     // ... filter to delete one InventoryItem
     *   }
     * })
     * 
     */
    delete<T extends InventoryItemDeleteArgs>(args: SelectSubset<T, InventoryItemDeleteArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryItem.
     * @param {InventoryItemUpdateArgs} args - Arguments to update one InventoryItem.
     * @example
     * // Update one InventoryItem
     * const inventoryItem = await prisma.inventoryItem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryItemUpdateArgs>(args: SelectSubset<T, InventoryItemUpdateArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryItems.
     * @param {InventoryItemDeleteManyArgs} args - Arguments to filter InventoryItems to delete.
     * @example
     * // Delete a few InventoryItems
     * const { count } = await prisma.inventoryItem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryItemDeleteManyArgs>(args?: SelectSubset<T, InventoryItemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryItems
     * const inventoryItem = await prisma.inventoryItem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryItemUpdateManyArgs>(args: SelectSubset<T, InventoryItemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryItem.
     * @param {InventoryItemUpsertArgs} args - Arguments to update or create a InventoryItem.
     * @example
     * // Update or create a InventoryItem
     * const inventoryItem = await prisma.inventoryItem.upsert({
     *   create: {
     *     // ... data to create a InventoryItem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryItem we want to update
     *   }
     * })
     */
    upsert<T extends InventoryItemUpsertArgs>(args: SelectSubset<T, InventoryItemUpsertArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryItems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemCountArgs} args - Arguments to filter InventoryItems to count.
     * @example
     * // Count the number of InventoryItems
     * const count = await prisma.inventoryItem.count({
     *   where: {
     *     // ... the filter for the InventoryItems we want to count
     *   }
     * })
    **/
    count<T extends InventoryItemCountArgs>(
      args?: Subset<T, InventoryItemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryItemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryItemAggregateArgs>(args: Subset<T, InventoryItemAggregateArgs>): Prisma.PrismaPromise<GetInventoryItemAggregateType<T>>

    /**
     * Group by InventoryItem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryItemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryItemGroupByArgs['orderBy'] }
        : { orderBy?: InventoryItemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryItemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryItemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryItem model
   */
  readonly fields: InventoryItemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryItem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryItemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends InventoryDocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDocumentDefaultArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    barcodes<T extends InventoryItem$barcodesArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItem$barcodesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "findMany"> | Null>
    changes<T extends InventoryItem$changesArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItem$changesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryItem model
   */ 
  interface InventoryItemFieldRefs {
    readonly id: FieldRef<"InventoryItem", 'String'>
    readonly documentId: FieldRef<"InventoryItem", 'String'>
    readonly sku: FieldRef<"InventoryItem", 'String'>
    readonly name: FieldRef<"InventoryItem", 'String'>
    readonly unit: FieldRef<"InventoryItem", 'String'>
    readonly qtyFrom1C: FieldRef<"InventoryItem", 'Decimal'>
    readonly countedQty: FieldRef<"InventoryItem", 'Decimal'>
    readonly correctedQty: FieldRef<"InventoryItem", 'Decimal'>
    readonly deltaQty: FieldRef<"InventoryItem", 'Decimal'>
    readonly note: FieldRef<"InventoryItem", 'String'>
    readonly createdAt: FieldRef<"InventoryItem", 'DateTime'>
    readonly updatedAt: FieldRef<"InventoryItem", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryItem findUnique
   */
  export type InventoryItemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem findUniqueOrThrow
   */
  export type InventoryItemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem findFirst
   */
  export type InventoryItemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem findFirstOrThrow
   */
  export type InventoryItemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItem to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItems.
     */
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem findMany
   */
  export type InventoryItemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItems to fetch.
     */
    where?: InventoryItemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItems to fetch.
     */
    orderBy?: InventoryItemOrderByWithRelationInput | InventoryItemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryItems.
     */
    cursor?: InventoryItemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItems.
     */
    skip?: number
    distinct?: InventoryItemScalarFieldEnum | InventoryItemScalarFieldEnum[]
  }

  /**
   * InventoryItem create
   */
  export type InventoryItemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryItem.
     */
    data: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
  }

  /**
   * InventoryItem createMany
   */
  export type InventoryItemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryItems.
     */
    data: InventoryItemCreateManyInput | InventoryItemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryItem update
   */
  export type InventoryItemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryItem.
     */
    data: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
    /**
     * Choose, which InventoryItem to update.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem updateMany
   */
  export type InventoryItemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryItems.
     */
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItems to update
     */
    where?: InventoryItemWhereInput
  }

  /**
   * InventoryItem upsert
   */
  export type InventoryItemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryItem to update in case it exists.
     */
    where: InventoryItemWhereUniqueInput
    /**
     * In case the InventoryItem found by the `where` argument doesn't exist, create a new InventoryItem with this data.
     */
    create: XOR<InventoryItemCreateInput, InventoryItemUncheckedCreateInput>
    /**
     * In case the InventoryItem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryItemUpdateInput, InventoryItemUncheckedUpdateInput>
  }

  /**
   * InventoryItem delete
   */
  export type InventoryItemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
    /**
     * Filter which InventoryItem to delete.
     */
    where: InventoryItemWhereUniqueInput
  }

  /**
   * InventoryItem deleteMany
   */
  export type InventoryItemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItems to delete
     */
    where?: InventoryItemWhereInput
  }

  /**
   * InventoryItem.barcodes
   */
  export type InventoryItem$barcodesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    where?: InventoryItemBarcodeWhereInput
    orderBy?: InventoryItemBarcodeOrderByWithRelationInput | InventoryItemBarcodeOrderByWithRelationInput[]
    cursor?: InventoryItemBarcodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemBarcodeScalarFieldEnum | InventoryItemBarcodeScalarFieldEnum[]
  }

  /**
   * InventoryItem.changes
   */
  export type InventoryItem$changesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    where?: InventoryItemChangeWhereInput
    orderBy?: InventoryItemChangeOrderByWithRelationInput | InventoryItemChangeOrderByWithRelationInput[]
    cursor?: InventoryItemChangeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryItemChangeScalarFieldEnum | InventoryItemChangeScalarFieldEnum[]
  }

  /**
   * InventoryItem without action
   */
  export type InventoryItemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItem
     */
    select?: InventoryItemSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemInclude<ExtArgs> | null
  }


  /**
   * Model InventoryItemBarcode
   */

  export type AggregateInventoryItemBarcode = {
    _count: InventoryItemBarcodeCountAggregateOutputType | null
    _min: InventoryItemBarcodeMinAggregateOutputType | null
    _max: InventoryItemBarcodeMaxAggregateOutputType | null
  }

  export type InventoryItemBarcodeMinAggregateOutputType = {
    id: string | null
    documentId: string | null
    itemId: string | null
    barcode: string | null
    isPrimary: boolean | null
  }

  export type InventoryItemBarcodeMaxAggregateOutputType = {
    id: string | null
    documentId: string | null
    itemId: string | null
    barcode: string | null
    isPrimary: boolean | null
  }

  export type InventoryItemBarcodeCountAggregateOutputType = {
    id: number
    documentId: number
    itemId: number
    barcode: number
    isPrimary: number
    _all: number
  }


  export type InventoryItemBarcodeMinAggregateInputType = {
    id?: true
    documentId?: true
    itemId?: true
    barcode?: true
    isPrimary?: true
  }

  export type InventoryItemBarcodeMaxAggregateInputType = {
    id?: true
    documentId?: true
    itemId?: true
    barcode?: true
    isPrimary?: true
  }

  export type InventoryItemBarcodeCountAggregateInputType = {
    id?: true
    documentId?: true
    itemId?: true
    barcode?: true
    isPrimary?: true
    _all?: true
  }

  export type InventoryItemBarcodeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItemBarcode to aggregate.
     */
    where?: InventoryItemBarcodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItemBarcodes to fetch.
     */
    orderBy?: InventoryItemBarcodeOrderByWithRelationInput | InventoryItemBarcodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryItemBarcodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItemBarcodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItemBarcodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryItemBarcodes
    **/
    _count?: true | InventoryItemBarcodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryItemBarcodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryItemBarcodeMaxAggregateInputType
  }

  export type GetInventoryItemBarcodeAggregateType<T extends InventoryItemBarcodeAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryItemBarcode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryItemBarcode[P]>
      : GetScalarType<T[P], AggregateInventoryItemBarcode[P]>
  }




  export type InventoryItemBarcodeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemBarcodeWhereInput
    orderBy?: InventoryItemBarcodeOrderByWithAggregationInput | InventoryItemBarcodeOrderByWithAggregationInput[]
    by: InventoryItemBarcodeScalarFieldEnum[] | InventoryItemBarcodeScalarFieldEnum
    having?: InventoryItemBarcodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryItemBarcodeCountAggregateInputType | true
    _min?: InventoryItemBarcodeMinAggregateInputType
    _max?: InventoryItemBarcodeMaxAggregateInputType
  }

  export type InventoryItemBarcodeGroupByOutputType = {
    id: string
    documentId: string
    itemId: string
    barcode: string
    isPrimary: boolean
    _count: InventoryItemBarcodeCountAggregateOutputType | null
    _min: InventoryItemBarcodeMinAggregateOutputType | null
    _max: InventoryItemBarcodeMaxAggregateOutputType | null
  }

  type GetInventoryItemBarcodeGroupByPayload<T extends InventoryItemBarcodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryItemBarcodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryItemBarcodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryItemBarcodeGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryItemBarcodeGroupByOutputType[P]>
        }
      >
    >


  export type InventoryItemBarcodeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    itemId?: boolean
    barcode?: boolean
    isPrimary?: boolean
    document?: boolean | InventoryDocumentDefaultArgs<ExtArgs>
    item?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItemBarcode"]>


  export type InventoryItemBarcodeSelectScalar = {
    id?: boolean
    documentId?: boolean
    itemId?: boolean
    barcode?: boolean
    isPrimary?: boolean
  }

  export type InventoryItemBarcodeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | InventoryDocumentDefaultArgs<ExtArgs>
    item?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }

  export type $InventoryItemBarcodePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryItemBarcode"
    objects: {
      document: Prisma.$InventoryDocumentPayload<ExtArgs>
      item: Prisma.$InventoryItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      documentId: string
      itemId: string
      barcode: string
      isPrimary: boolean
    }, ExtArgs["result"]["inventoryItemBarcode"]>
    composites: {}
  }

  type InventoryItemBarcodeGetPayload<S extends boolean | null | undefined | InventoryItemBarcodeDefaultArgs> = $Result.GetResult<Prisma.$InventoryItemBarcodePayload, S>

  type InventoryItemBarcodeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryItemBarcodeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryItemBarcodeCountAggregateInputType | true
    }

  export interface InventoryItemBarcodeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryItemBarcode'], meta: { name: 'InventoryItemBarcode' } }
    /**
     * Find zero or one InventoryItemBarcode that matches the filter.
     * @param {InventoryItemBarcodeFindUniqueArgs} args - Arguments to find a InventoryItemBarcode
     * @example
     * // Get one InventoryItemBarcode
     * const inventoryItemBarcode = await prisma.inventoryItemBarcode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryItemBarcodeFindUniqueArgs>(args: SelectSubset<T, InventoryItemBarcodeFindUniqueArgs<ExtArgs>>): Prisma__InventoryItemBarcodeClient<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryItemBarcode that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryItemBarcodeFindUniqueOrThrowArgs} args - Arguments to find a InventoryItemBarcode
     * @example
     * // Get one InventoryItemBarcode
     * const inventoryItemBarcode = await prisma.inventoryItemBarcode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryItemBarcodeFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryItemBarcodeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryItemBarcodeClient<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryItemBarcode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemBarcodeFindFirstArgs} args - Arguments to find a InventoryItemBarcode
     * @example
     * // Get one InventoryItemBarcode
     * const inventoryItemBarcode = await prisma.inventoryItemBarcode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryItemBarcodeFindFirstArgs>(args?: SelectSubset<T, InventoryItemBarcodeFindFirstArgs<ExtArgs>>): Prisma__InventoryItemBarcodeClient<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryItemBarcode that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemBarcodeFindFirstOrThrowArgs} args - Arguments to find a InventoryItemBarcode
     * @example
     * // Get one InventoryItemBarcode
     * const inventoryItemBarcode = await prisma.inventoryItemBarcode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryItemBarcodeFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryItemBarcodeFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryItemBarcodeClient<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryItemBarcodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemBarcodeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryItemBarcodes
     * const inventoryItemBarcodes = await prisma.inventoryItemBarcode.findMany()
     * 
     * // Get first 10 InventoryItemBarcodes
     * const inventoryItemBarcodes = await prisma.inventoryItemBarcode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryItemBarcodeWithIdOnly = await prisma.inventoryItemBarcode.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryItemBarcodeFindManyArgs>(args?: SelectSubset<T, InventoryItemBarcodeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryItemBarcode.
     * @param {InventoryItemBarcodeCreateArgs} args - Arguments to create a InventoryItemBarcode.
     * @example
     * // Create one InventoryItemBarcode
     * const InventoryItemBarcode = await prisma.inventoryItemBarcode.create({
     *   data: {
     *     // ... data to create a InventoryItemBarcode
     *   }
     * })
     * 
     */
    create<T extends InventoryItemBarcodeCreateArgs>(args: SelectSubset<T, InventoryItemBarcodeCreateArgs<ExtArgs>>): Prisma__InventoryItemBarcodeClient<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryItemBarcodes.
     * @param {InventoryItemBarcodeCreateManyArgs} args - Arguments to create many InventoryItemBarcodes.
     * @example
     * // Create many InventoryItemBarcodes
     * const inventoryItemBarcode = await prisma.inventoryItemBarcode.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryItemBarcodeCreateManyArgs>(args?: SelectSubset<T, InventoryItemBarcodeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InventoryItemBarcode.
     * @param {InventoryItemBarcodeDeleteArgs} args - Arguments to delete one InventoryItemBarcode.
     * @example
     * // Delete one InventoryItemBarcode
     * const InventoryItemBarcode = await prisma.inventoryItemBarcode.delete({
     *   where: {
     *     // ... filter to delete one InventoryItemBarcode
     *   }
     * })
     * 
     */
    delete<T extends InventoryItemBarcodeDeleteArgs>(args: SelectSubset<T, InventoryItemBarcodeDeleteArgs<ExtArgs>>): Prisma__InventoryItemBarcodeClient<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryItemBarcode.
     * @param {InventoryItemBarcodeUpdateArgs} args - Arguments to update one InventoryItemBarcode.
     * @example
     * // Update one InventoryItemBarcode
     * const inventoryItemBarcode = await prisma.inventoryItemBarcode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryItemBarcodeUpdateArgs>(args: SelectSubset<T, InventoryItemBarcodeUpdateArgs<ExtArgs>>): Prisma__InventoryItemBarcodeClient<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryItemBarcodes.
     * @param {InventoryItemBarcodeDeleteManyArgs} args - Arguments to filter InventoryItemBarcodes to delete.
     * @example
     * // Delete a few InventoryItemBarcodes
     * const { count } = await prisma.inventoryItemBarcode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryItemBarcodeDeleteManyArgs>(args?: SelectSubset<T, InventoryItemBarcodeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItemBarcodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemBarcodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryItemBarcodes
     * const inventoryItemBarcode = await prisma.inventoryItemBarcode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryItemBarcodeUpdateManyArgs>(args: SelectSubset<T, InventoryItemBarcodeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryItemBarcode.
     * @param {InventoryItemBarcodeUpsertArgs} args - Arguments to update or create a InventoryItemBarcode.
     * @example
     * // Update or create a InventoryItemBarcode
     * const inventoryItemBarcode = await prisma.inventoryItemBarcode.upsert({
     *   create: {
     *     // ... data to create a InventoryItemBarcode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryItemBarcode we want to update
     *   }
     * })
     */
    upsert<T extends InventoryItemBarcodeUpsertArgs>(args: SelectSubset<T, InventoryItemBarcodeUpsertArgs<ExtArgs>>): Prisma__InventoryItemBarcodeClient<$Result.GetResult<Prisma.$InventoryItemBarcodePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryItemBarcodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemBarcodeCountArgs} args - Arguments to filter InventoryItemBarcodes to count.
     * @example
     * // Count the number of InventoryItemBarcodes
     * const count = await prisma.inventoryItemBarcode.count({
     *   where: {
     *     // ... the filter for the InventoryItemBarcodes we want to count
     *   }
     * })
    **/
    count<T extends InventoryItemBarcodeCountArgs>(
      args?: Subset<T, InventoryItemBarcodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryItemBarcodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryItemBarcode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemBarcodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryItemBarcodeAggregateArgs>(args: Subset<T, InventoryItemBarcodeAggregateArgs>): Prisma.PrismaPromise<GetInventoryItemBarcodeAggregateType<T>>

    /**
     * Group by InventoryItemBarcode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemBarcodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryItemBarcodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryItemBarcodeGroupByArgs['orderBy'] }
        : { orderBy?: InventoryItemBarcodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryItemBarcodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryItemBarcodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryItemBarcode model
   */
  readonly fields: InventoryItemBarcodeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryItemBarcode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryItemBarcodeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends InventoryDocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDocumentDefaultArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends InventoryItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItemDefaultArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryItemBarcode model
   */ 
  interface InventoryItemBarcodeFieldRefs {
    readonly id: FieldRef<"InventoryItemBarcode", 'String'>
    readonly documentId: FieldRef<"InventoryItemBarcode", 'String'>
    readonly itemId: FieldRef<"InventoryItemBarcode", 'String'>
    readonly barcode: FieldRef<"InventoryItemBarcode", 'String'>
    readonly isPrimary: FieldRef<"InventoryItemBarcode", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * InventoryItemBarcode findUnique
   */
  export type InventoryItemBarcodeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemBarcode to fetch.
     */
    where: InventoryItemBarcodeWhereUniqueInput
  }

  /**
   * InventoryItemBarcode findUniqueOrThrow
   */
  export type InventoryItemBarcodeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemBarcode to fetch.
     */
    where: InventoryItemBarcodeWhereUniqueInput
  }

  /**
   * InventoryItemBarcode findFirst
   */
  export type InventoryItemBarcodeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemBarcode to fetch.
     */
    where?: InventoryItemBarcodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItemBarcodes to fetch.
     */
    orderBy?: InventoryItemBarcodeOrderByWithRelationInput | InventoryItemBarcodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItemBarcodes.
     */
    cursor?: InventoryItemBarcodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItemBarcodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItemBarcodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItemBarcodes.
     */
    distinct?: InventoryItemBarcodeScalarFieldEnum | InventoryItemBarcodeScalarFieldEnum[]
  }

  /**
   * InventoryItemBarcode findFirstOrThrow
   */
  export type InventoryItemBarcodeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemBarcode to fetch.
     */
    where?: InventoryItemBarcodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItemBarcodes to fetch.
     */
    orderBy?: InventoryItemBarcodeOrderByWithRelationInput | InventoryItemBarcodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItemBarcodes.
     */
    cursor?: InventoryItemBarcodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItemBarcodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItemBarcodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItemBarcodes.
     */
    distinct?: InventoryItemBarcodeScalarFieldEnum | InventoryItemBarcodeScalarFieldEnum[]
  }

  /**
   * InventoryItemBarcode findMany
   */
  export type InventoryItemBarcodeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemBarcodes to fetch.
     */
    where?: InventoryItemBarcodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItemBarcodes to fetch.
     */
    orderBy?: InventoryItemBarcodeOrderByWithRelationInput | InventoryItemBarcodeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryItemBarcodes.
     */
    cursor?: InventoryItemBarcodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItemBarcodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItemBarcodes.
     */
    skip?: number
    distinct?: InventoryItemBarcodeScalarFieldEnum | InventoryItemBarcodeScalarFieldEnum[]
  }

  /**
   * InventoryItemBarcode create
   */
  export type InventoryItemBarcodeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryItemBarcode.
     */
    data: XOR<InventoryItemBarcodeCreateInput, InventoryItemBarcodeUncheckedCreateInput>
  }

  /**
   * InventoryItemBarcode createMany
   */
  export type InventoryItemBarcodeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryItemBarcodes.
     */
    data: InventoryItemBarcodeCreateManyInput | InventoryItemBarcodeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryItemBarcode update
   */
  export type InventoryItemBarcodeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryItemBarcode.
     */
    data: XOR<InventoryItemBarcodeUpdateInput, InventoryItemBarcodeUncheckedUpdateInput>
    /**
     * Choose, which InventoryItemBarcode to update.
     */
    where: InventoryItemBarcodeWhereUniqueInput
  }

  /**
   * InventoryItemBarcode updateMany
   */
  export type InventoryItemBarcodeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryItemBarcodes.
     */
    data: XOR<InventoryItemBarcodeUpdateManyMutationInput, InventoryItemBarcodeUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItemBarcodes to update
     */
    where?: InventoryItemBarcodeWhereInput
  }

  /**
   * InventoryItemBarcode upsert
   */
  export type InventoryItemBarcodeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryItemBarcode to update in case it exists.
     */
    where: InventoryItemBarcodeWhereUniqueInput
    /**
     * In case the InventoryItemBarcode found by the `where` argument doesn't exist, create a new InventoryItemBarcode with this data.
     */
    create: XOR<InventoryItemBarcodeCreateInput, InventoryItemBarcodeUncheckedCreateInput>
    /**
     * In case the InventoryItemBarcode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryItemBarcodeUpdateInput, InventoryItemBarcodeUncheckedUpdateInput>
  }

  /**
   * InventoryItemBarcode delete
   */
  export type InventoryItemBarcodeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
    /**
     * Filter which InventoryItemBarcode to delete.
     */
    where: InventoryItemBarcodeWhereUniqueInput
  }

  /**
   * InventoryItemBarcode deleteMany
   */
  export type InventoryItemBarcodeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItemBarcodes to delete
     */
    where?: InventoryItemBarcodeWhereInput
  }

  /**
   * InventoryItemBarcode without action
   */
  export type InventoryItemBarcodeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemBarcode
     */
    select?: InventoryItemBarcodeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemBarcodeInclude<ExtArgs> | null
  }


  /**
   * Model InventoryItemChange
   */

  export type AggregateInventoryItemChange = {
    _count: InventoryItemChangeCountAggregateOutputType | null
    _avg: InventoryItemChangeAvgAggregateOutputType | null
    _sum: InventoryItemChangeSumAggregateOutputType | null
    _min: InventoryItemChangeMinAggregateOutputType | null
    _max: InventoryItemChangeMaxAggregateOutputType | null
  }

  export type InventoryItemChangeAvgAggregateOutputType = {
    countedQty: Decimal | null
    correctedQty: Decimal | null
  }

  export type InventoryItemChangeSumAggregateOutputType = {
    countedQty: Decimal | null
    correctedQty: Decimal | null
  }

  export type InventoryItemChangeMinAggregateOutputType = {
    id: string | null
    documentId: string | null
    itemId: string | null
    deviceId: string | null
    countedQty: Decimal | null
    correctedQty: Decimal | null
    note: string | null
    createdAt: Date | null
  }

  export type InventoryItemChangeMaxAggregateOutputType = {
    id: string | null
    documentId: string | null
    itemId: string | null
    deviceId: string | null
    countedQty: Decimal | null
    correctedQty: Decimal | null
    note: string | null
    createdAt: Date | null
  }

  export type InventoryItemChangeCountAggregateOutputType = {
    id: number
    documentId: number
    itemId: number
    deviceId: number
    countedQty: number
    correctedQty: number
    note: number
    createdAt: number
    _all: number
  }


  export type InventoryItemChangeAvgAggregateInputType = {
    countedQty?: true
    correctedQty?: true
  }

  export type InventoryItemChangeSumAggregateInputType = {
    countedQty?: true
    correctedQty?: true
  }

  export type InventoryItemChangeMinAggregateInputType = {
    id?: true
    documentId?: true
    itemId?: true
    deviceId?: true
    countedQty?: true
    correctedQty?: true
    note?: true
    createdAt?: true
  }

  export type InventoryItemChangeMaxAggregateInputType = {
    id?: true
    documentId?: true
    itemId?: true
    deviceId?: true
    countedQty?: true
    correctedQty?: true
    note?: true
    createdAt?: true
  }

  export type InventoryItemChangeCountAggregateInputType = {
    id?: true
    documentId?: true
    itemId?: true
    deviceId?: true
    countedQty?: true
    correctedQty?: true
    note?: true
    createdAt?: true
    _all?: true
  }

  export type InventoryItemChangeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItemChange to aggregate.
     */
    where?: InventoryItemChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItemChanges to fetch.
     */
    orderBy?: InventoryItemChangeOrderByWithRelationInput | InventoryItemChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InventoryItemChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItemChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItemChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InventoryItemChanges
    **/
    _count?: true | InventoryItemChangeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryItemChangeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventoryItemChangeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryItemChangeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryItemChangeMaxAggregateInputType
  }

  export type GetInventoryItemChangeAggregateType<T extends InventoryItemChangeAggregateArgs> = {
        [P in keyof T & keyof AggregateInventoryItemChange]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventoryItemChange[P]>
      : GetScalarType<T[P], AggregateInventoryItemChange[P]>
  }




  export type InventoryItemChangeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InventoryItemChangeWhereInput
    orderBy?: InventoryItemChangeOrderByWithAggregationInput | InventoryItemChangeOrderByWithAggregationInput[]
    by: InventoryItemChangeScalarFieldEnum[] | InventoryItemChangeScalarFieldEnum
    having?: InventoryItemChangeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryItemChangeCountAggregateInputType | true
    _avg?: InventoryItemChangeAvgAggregateInputType
    _sum?: InventoryItemChangeSumAggregateInputType
    _min?: InventoryItemChangeMinAggregateInputType
    _max?: InventoryItemChangeMaxAggregateInputType
  }

  export type InventoryItemChangeGroupByOutputType = {
    id: string
    documentId: string
    itemId: string
    deviceId: string
    countedQty: Decimal | null
    correctedQty: Decimal | null
    note: string | null
    createdAt: Date
    _count: InventoryItemChangeCountAggregateOutputType | null
    _avg: InventoryItemChangeAvgAggregateOutputType | null
    _sum: InventoryItemChangeSumAggregateOutputType | null
    _min: InventoryItemChangeMinAggregateOutputType | null
    _max: InventoryItemChangeMaxAggregateOutputType | null
  }

  type GetInventoryItemChangeGroupByPayload<T extends InventoryItemChangeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryItemChangeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryItemChangeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryItemChangeGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryItemChangeGroupByOutputType[P]>
        }
      >
    >


  export type InventoryItemChangeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    documentId?: boolean
    itemId?: boolean
    deviceId?: boolean
    countedQty?: boolean
    correctedQty?: boolean
    note?: boolean
    createdAt?: boolean
    document?: boolean | InventoryDocumentDefaultArgs<ExtArgs>
    item?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventoryItemChange"]>


  export type InventoryItemChangeSelectScalar = {
    id?: boolean
    documentId?: boolean
    itemId?: boolean
    deviceId?: boolean
    countedQty?: boolean
    correctedQty?: boolean
    note?: boolean
    createdAt?: boolean
  }

  export type InventoryItemChangeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    document?: boolean | InventoryDocumentDefaultArgs<ExtArgs>
    item?: boolean | InventoryItemDefaultArgs<ExtArgs>
  }

  export type $InventoryItemChangePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InventoryItemChange"
    objects: {
      document: Prisma.$InventoryDocumentPayload<ExtArgs>
      item: Prisma.$InventoryItemPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      documentId: string
      itemId: string
      deviceId: string
      countedQty: Prisma.Decimal | null
      correctedQty: Prisma.Decimal | null
      note: string | null
      createdAt: Date
    }, ExtArgs["result"]["inventoryItemChange"]>
    composites: {}
  }

  type InventoryItemChangeGetPayload<S extends boolean | null | undefined | InventoryItemChangeDefaultArgs> = $Result.GetResult<Prisma.$InventoryItemChangePayload, S>

  type InventoryItemChangeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InventoryItemChangeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InventoryItemChangeCountAggregateInputType | true
    }

  export interface InventoryItemChangeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InventoryItemChange'], meta: { name: 'InventoryItemChange' } }
    /**
     * Find zero or one InventoryItemChange that matches the filter.
     * @param {InventoryItemChangeFindUniqueArgs} args - Arguments to find a InventoryItemChange
     * @example
     * // Get one InventoryItemChange
     * const inventoryItemChange = await prisma.inventoryItemChange.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InventoryItemChangeFindUniqueArgs>(args: SelectSubset<T, InventoryItemChangeFindUniqueArgs<ExtArgs>>): Prisma__InventoryItemChangeClient<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InventoryItemChange that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InventoryItemChangeFindUniqueOrThrowArgs} args - Arguments to find a InventoryItemChange
     * @example
     * // Get one InventoryItemChange
     * const inventoryItemChange = await prisma.inventoryItemChange.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InventoryItemChangeFindUniqueOrThrowArgs>(args: SelectSubset<T, InventoryItemChangeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InventoryItemChangeClient<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InventoryItemChange that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemChangeFindFirstArgs} args - Arguments to find a InventoryItemChange
     * @example
     * // Get one InventoryItemChange
     * const inventoryItemChange = await prisma.inventoryItemChange.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InventoryItemChangeFindFirstArgs>(args?: SelectSubset<T, InventoryItemChangeFindFirstArgs<ExtArgs>>): Prisma__InventoryItemChangeClient<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InventoryItemChange that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemChangeFindFirstOrThrowArgs} args - Arguments to find a InventoryItemChange
     * @example
     * // Get one InventoryItemChange
     * const inventoryItemChange = await prisma.inventoryItemChange.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InventoryItemChangeFindFirstOrThrowArgs>(args?: SelectSubset<T, InventoryItemChangeFindFirstOrThrowArgs<ExtArgs>>): Prisma__InventoryItemChangeClient<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InventoryItemChanges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemChangeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InventoryItemChanges
     * const inventoryItemChanges = await prisma.inventoryItemChange.findMany()
     * 
     * // Get first 10 InventoryItemChanges
     * const inventoryItemChanges = await prisma.inventoryItemChange.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inventoryItemChangeWithIdOnly = await prisma.inventoryItemChange.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InventoryItemChangeFindManyArgs>(args?: SelectSubset<T, InventoryItemChangeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InventoryItemChange.
     * @param {InventoryItemChangeCreateArgs} args - Arguments to create a InventoryItemChange.
     * @example
     * // Create one InventoryItemChange
     * const InventoryItemChange = await prisma.inventoryItemChange.create({
     *   data: {
     *     // ... data to create a InventoryItemChange
     *   }
     * })
     * 
     */
    create<T extends InventoryItemChangeCreateArgs>(args: SelectSubset<T, InventoryItemChangeCreateArgs<ExtArgs>>): Prisma__InventoryItemChangeClient<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InventoryItemChanges.
     * @param {InventoryItemChangeCreateManyArgs} args - Arguments to create many InventoryItemChanges.
     * @example
     * // Create many InventoryItemChanges
     * const inventoryItemChange = await prisma.inventoryItemChange.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InventoryItemChangeCreateManyArgs>(args?: SelectSubset<T, InventoryItemChangeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a InventoryItemChange.
     * @param {InventoryItemChangeDeleteArgs} args - Arguments to delete one InventoryItemChange.
     * @example
     * // Delete one InventoryItemChange
     * const InventoryItemChange = await prisma.inventoryItemChange.delete({
     *   where: {
     *     // ... filter to delete one InventoryItemChange
     *   }
     * })
     * 
     */
    delete<T extends InventoryItemChangeDeleteArgs>(args: SelectSubset<T, InventoryItemChangeDeleteArgs<ExtArgs>>): Prisma__InventoryItemChangeClient<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InventoryItemChange.
     * @param {InventoryItemChangeUpdateArgs} args - Arguments to update one InventoryItemChange.
     * @example
     * // Update one InventoryItemChange
     * const inventoryItemChange = await prisma.inventoryItemChange.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InventoryItemChangeUpdateArgs>(args: SelectSubset<T, InventoryItemChangeUpdateArgs<ExtArgs>>): Prisma__InventoryItemChangeClient<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InventoryItemChanges.
     * @param {InventoryItemChangeDeleteManyArgs} args - Arguments to filter InventoryItemChanges to delete.
     * @example
     * // Delete a few InventoryItemChanges
     * const { count } = await prisma.inventoryItemChange.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InventoryItemChangeDeleteManyArgs>(args?: SelectSubset<T, InventoryItemChangeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InventoryItemChanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemChangeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InventoryItemChanges
     * const inventoryItemChange = await prisma.inventoryItemChange.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InventoryItemChangeUpdateManyArgs>(args: SelectSubset<T, InventoryItemChangeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InventoryItemChange.
     * @param {InventoryItemChangeUpsertArgs} args - Arguments to update or create a InventoryItemChange.
     * @example
     * // Update or create a InventoryItemChange
     * const inventoryItemChange = await prisma.inventoryItemChange.upsert({
     *   create: {
     *     // ... data to create a InventoryItemChange
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InventoryItemChange we want to update
     *   }
     * })
     */
    upsert<T extends InventoryItemChangeUpsertArgs>(args: SelectSubset<T, InventoryItemChangeUpsertArgs<ExtArgs>>): Prisma__InventoryItemChangeClient<$Result.GetResult<Prisma.$InventoryItemChangePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InventoryItemChanges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemChangeCountArgs} args - Arguments to filter InventoryItemChanges to count.
     * @example
     * // Count the number of InventoryItemChanges
     * const count = await prisma.inventoryItemChange.count({
     *   where: {
     *     // ... the filter for the InventoryItemChanges we want to count
     *   }
     * })
    **/
    count<T extends InventoryItemChangeCountArgs>(
      args?: Subset<T, InventoryItemChangeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryItemChangeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InventoryItemChange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemChangeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryItemChangeAggregateArgs>(args: Subset<T, InventoryItemChangeAggregateArgs>): Prisma.PrismaPromise<GetInventoryItemChangeAggregateType<T>>

    /**
     * Group by InventoryItemChange.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryItemChangeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InventoryItemChangeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InventoryItemChangeGroupByArgs['orderBy'] }
        : { orderBy?: InventoryItemChangeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InventoryItemChangeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryItemChangeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InventoryItemChange model
   */
  readonly fields: InventoryItemChangeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InventoryItemChange.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InventoryItemChangeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    document<T extends InventoryDocumentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryDocumentDefaultArgs<ExtArgs>>): Prisma__InventoryDocumentClient<$Result.GetResult<Prisma.$InventoryDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    item<T extends InventoryItemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InventoryItemDefaultArgs<ExtArgs>>): Prisma__InventoryItemClient<$Result.GetResult<Prisma.$InventoryItemPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InventoryItemChange model
   */ 
  interface InventoryItemChangeFieldRefs {
    readonly id: FieldRef<"InventoryItemChange", 'String'>
    readonly documentId: FieldRef<"InventoryItemChange", 'String'>
    readonly itemId: FieldRef<"InventoryItemChange", 'String'>
    readonly deviceId: FieldRef<"InventoryItemChange", 'String'>
    readonly countedQty: FieldRef<"InventoryItemChange", 'Decimal'>
    readonly correctedQty: FieldRef<"InventoryItemChange", 'Decimal'>
    readonly note: FieldRef<"InventoryItemChange", 'String'>
    readonly createdAt: FieldRef<"InventoryItemChange", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InventoryItemChange findUnique
   */
  export type InventoryItemChangeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemChange to fetch.
     */
    where: InventoryItemChangeWhereUniqueInput
  }

  /**
   * InventoryItemChange findUniqueOrThrow
   */
  export type InventoryItemChangeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemChange to fetch.
     */
    where: InventoryItemChangeWhereUniqueInput
  }

  /**
   * InventoryItemChange findFirst
   */
  export type InventoryItemChangeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemChange to fetch.
     */
    where?: InventoryItemChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItemChanges to fetch.
     */
    orderBy?: InventoryItemChangeOrderByWithRelationInput | InventoryItemChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItemChanges.
     */
    cursor?: InventoryItemChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItemChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItemChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItemChanges.
     */
    distinct?: InventoryItemChangeScalarFieldEnum | InventoryItemChangeScalarFieldEnum[]
  }

  /**
   * InventoryItemChange findFirstOrThrow
   */
  export type InventoryItemChangeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemChange to fetch.
     */
    where?: InventoryItemChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItemChanges to fetch.
     */
    orderBy?: InventoryItemChangeOrderByWithRelationInput | InventoryItemChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InventoryItemChanges.
     */
    cursor?: InventoryItemChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItemChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItemChanges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InventoryItemChanges.
     */
    distinct?: InventoryItemChangeScalarFieldEnum | InventoryItemChangeScalarFieldEnum[]
  }

  /**
   * InventoryItemChange findMany
   */
  export type InventoryItemChangeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * Filter, which InventoryItemChanges to fetch.
     */
    where?: InventoryItemChangeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InventoryItemChanges to fetch.
     */
    orderBy?: InventoryItemChangeOrderByWithRelationInput | InventoryItemChangeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InventoryItemChanges.
     */
    cursor?: InventoryItemChangeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InventoryItemChanges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InventoryItemChanges.
     */
    skip?: number
    distinct?: InventoryItemChangeScalarFieldEnum | InventoryItemChangeScalarFieldEnum[]
  }

  /**
   * InventoryItemChange create
   */
  export type InventoryItemChangeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * The data needed to create a InventoryItemChange.
     */
    data: XOR<InventoryItemChangeCreateInput, InventoryItemChangeUncheckedCreateInput>
  }

  /**
   * InventoryItemChange createMany
   */
  export type InventoryItemChangeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InventoryItemChanges.
     */
    data: InventoryItemChangeCreateManyInput | InventoryItemChangeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InventoryItemChange update
   */
  export type InventoryItemChangeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * The data needed to update a InventoryItemChange.
     */
    data: XOR<InventoryItemChangeUpdateInput, InventoryItemChangeUncheckedUpdateInput>
    /**
     * Choose, which InventoryItemChange to update.
     */
    where: InventoryItemChangeWhereUniqueInput
  }

  /**
   * InventoryItemChange updateMany
   */
  export type InventoryItemChangeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InventoryItemChanges.
     */
    data: XOR<InventoryItemChangeUpdateManyMutationInput, InventoryItemChangeUncheckedUpdateManyInput>
    /**
     * Filter which InventoryItemChanges to update
     */
    where?: InventoryItemChangeWhereInput
  }

  /**
   * InventoryItemChange upsert
   */
  export type InventoryItemChangeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * The filter to search for the InventoryItemChange to update in case it exists.
     */
    where: InventoryItemChangeWhereUniqueInput
    /**
     * In case the InventoryItemChange found by the `where` argument doesn't exist, create a new InventoryItemChange with this data.
     */
    create: XOR<InventoryItemChangeCreateInput, InventoryItemChangeUncheckedCreateInput>
    /**
     * In case the InventoryItemChange was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InventoryItemChangeUpdateInput, InventoryItemChangeUncheckedUpdateInput>
  }

  /**
   * InventoryItemChange delete
   */
  export type InventoryItemChangeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
    /**
     * Filter which InventoryItemChange to delete.
     */
    where: InventoryItemChangeWhereUniqueInput
  }

  /**
   * InventoryItemChange deleteMany
   */
  export type InventoryItemChangeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InventoryItemChanges to delete
     */
    where?: InventoryItemChangeWhereInput
  }

  /**
   * InventoryItemChange without action
   */
  export type InventoryItemChangeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryItemChange
     */
    select?: InventoryItemChangeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InventoryItemChangeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const WarehouseScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name'
  };

  export type WarehouseScalarFieldEnum = (typeof WarehouseScalarFieldEnum)[keyof typeof WarehouseScalarFieldEnum]


  export const InventoryDocumentScalarFieldEnum: {
    id: 'id',
    externalId: 'externalId',
    onecNumber: 'onecNumber',
    onecDate: 'onecDate',
    warehouseId: 'warehouseId',
    warehouseCode: 'warehouseCode',
    status: 'status',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryDocumentScalarFieldEnum = (typeof InventoryDocumentScalarFieldEnum)[keyof typeof InventoryDocumentScalarFieldEnum]


  export const InventoryItemScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    sku: 'sku',
    name: 'name',
    unit: 'unit',
    qtyFrom1C: 'qtyFrom1C',
    countedQty: 'countedQty',
    correctedQty: 'correctedQty',
    deltaQty: 'deltaQty',
    note: 'note',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InventoryItemScalarFieldEnum = (typeof InventoryItemScalarFieldEnum)[keyof typeof InventoryItemScalarFieldEnum]


  export const InventoryItemBarcodeScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    itemId: 'itemId',
    barcode: 'barcode',
    isPrimary: 'isPrimary'
  };

  export type InventoryItemBarcodeScalarFieldEnum = (typeof InventoryItemBarcodeScalarFieldEnum)[keyof typeof InventoryItemBarcodeScalarFieldEnum]


  export const InventoryItemChangeScalarFieldEnum: {
    id: 'id',
    documentId: 'documentId',
    itemId: 'itemId',
    deviceId: 'deviceId',
    countedQty: 'countedQty',
    correctedQty: 'correctedQty',
    note: 'note',
    createdAt: 'createdAt'
  };

  export type InventoryItemChangeScalarFieldEnum = (typeof InventoryItemChangeScalarFieldEnum)[keyof typeof InventoryItemChangeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DocStatus'
   */
  export type EnumDocStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocStatus'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type WarehouseWhereInput = {
    AND?: WarehouseWhereInput | WarehouseWhereInput[]
    OR?: WarehouseWhereInput[]
    NOT?: WarehouseWhereInput | WarehouseWhereInput[]
    id?: StringFilter<"Warehouse"> | string
    code?: StringFilter<"Warehouse"> | string
    name?: StringFilter<"Warehouse"> | string
    docs?: InventoryDocumentListRelationFilter
  }

  export type WarehouseOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    docs?: InventoryDocumentOrderByRelationAggregateInput
  }

  export type WarehouseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    code?: string
    AND?: WarehouseWhereInput | WarehouseWhereInput[]
    OR?: WarehouseWhereInput[]
    NOT?: WarehouseWhereInput | WarehouseWhereInput[]
    name?: StringFilter<"Warehouse"> | string
    docs?: InventoryDocumentListRelationFilter
  }, "id" | "code">

  export type WarehouseOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    _count?: WarehouseCountOrderByAggregateInput
    _max?: WarehouseMaxOrderByAggregateInput
    _min?: WarehouseMinOrderByAggregateInput
  }

  export type WarehouseScalarWhereWithAggregatesInput = {
    AND?: WarehouseScalarWhereWithAggregatesInput | WarehouseScalarWhereWithAggregatesInput[]
    OR?: WarehouseScalarWhereWithAggregatesInput[]
    NOT?: WarehouseScalarWhereWithAggregatesInput | WarehouseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Warehouse"> | string
    code?: StringWithAggregatesFilter<"Warehouse"> | string
    name?: StringWithAggregatesFilter<"Warehouse"> | string
  }

  export type InventoryDocumentWhereInput = {
    AND?: InventoryDocumentWhereInput | InventoryDocumentWhereInput[]
    OR?: InventoryDocumentWhereInput[]
    NOT?: InventoryDocumentWhereInput | InventoryDocumentWhereInput[]
    id?: StringFilter<"InventoryDocument"> | string
    externalId?: StringFilter<"InventoryDocument"> | string
    onecNumber?: StringFilter<"InventoryDocument"> | string
    onecDate?: DateTimeFilter<"InventoryDocument"> | Date | string
    warehouseId?: StringFilter<"InventoryDocument"> | string
    warehouseCode?: StringFilter<"InventoryDocument"> | string
    status?: EnumDocStatusFilter<"InventoryDocument"> | $Enums.DocStatus
    version?: IntFilter<"InventoryDocument"> | number
    createdAt?: DateTimeFilter<"InventoryDocument"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryDocument"> | Date | string
    warehouse?: XOR<WarehouseRelationFilter, WarehouseWhereInput>
    items?: InventoryItemListRelationFilter
    barcodes?: InventoryItemBarcodeListRelationFilter
    changes?: InventoryItemChangeListRelationFilter
  }

  export type InventoryDocumentOrderByWithRelationInput = {
    id?: SortOrder
    externalId?: SortOrder
    onecNumber?: SortOrder
    onecDate?: SortOrder
    warehouseId?: SortOrder
    warehouseCode?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    warehouse?: WarehouseOrderByWithRelationInput
    items?: InventoryItemOrderByRelationAggregateInput
    barcodes?: InventoryItemBarcodeOrderByRelationAggregateInput
    changes?: InventoryItemChangeOrderByRelationAggregateInput
  }

  export type InventoryDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    externalId?: string
    AND?: InventoryDocumentWhereInput | InventoryDocumentWhereInput[]
    OR?: InventoryDocumentWhereInput[]
    NOT?: InventoryDocumentWhereInput | InventoryDocumentWhereInput[]
    onecNumber?: StringFilter<"InventoryDocument"> | string
    onecDate?: DateTimeFilter<"InventoryDocument"> | Date | string
    warehouseId?: StringFilter<"InventoryDocument"> | string
    warehouseCode?: StringFilter<"InventoryDocument"> | string
    status?: EnumDocStatusFilter<"InventoryDocument"> | $Enums.DocStatus
    version?: IntFilter<"InventoryDocument"> | number
    createdAt?: DateTimeFilter<"InventoryDocument"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryDocument"> | Date | string
    warehouse?: XOR<WarehouseRelationFilter, WarehouseWhereInput>
    items?: InventoryItemListRelationFilter
    barcodes?: InventoryItemBarcodeListRelationFilter
    changes?: InventoryItemChangeListRelationFilter
  }, "id" | "externalId">

  export type InventoryDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    externalId?: SortOrder
    onecNumber?: SortOrder
    onecDate?: SortOrder
    warehouseId?: SortOrder
    warehouseCode?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryDocumentCountOrderByAggregateInput
    _avg?: InventoryDocumentAvgOrderByAggregateInput
    _max?: InventoryDocumentMaxOrderByAggregateInput
    _min?: InventoryDocumentMinOrderByAggregateInput
    _sum?: InventoryDocumentSumOrderByAggregateInput
  }

  export type InventoryDocumentScalarWhereWithAggregatesInput = {
    AND?: InventoryDocumentScalarWhereWithAggregatesInput | InventoryDocumentScalarWhereWithAggregatesInput[]
    OR?: InventoryDocumentScalarWhereWithAggregatesInput[]
    NOT?: InventoryDocumentScalarWhereWithAggregatesInput | InventoryDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryDocument"> | string
    externalId?: StringWithAggregatesFilter<"InventoryDocument"> | string
    onecNumber?: StringWithAggregatesFilter<"InventoryDocument"> | string
    onecDate?: DateTimeWithAggregatesFilter<"InventoryDocument"> | Date | string
    warehouseId?: StringWithAggregatesFilter<"InventoryDocument"> | string
    warehouseCode?: StringWithAggregatesFilter<"InventoryDocument"> | string
    status?: EnumDocStatusWithAggregatesFilter<"InventoryDocument"> | $Enums.DocStatus
    version?: IntWithAggregatesFilter<"InventoryDocument"> | number
    createdAt?: DateTimeWithAggregatesFilter<"InventoryDocument"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryDocument"> | Date | string
  }

  export type InventoryItemWhereInput = {
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    id?: StringFilter<"InventoryItem"> | string
    documentId?: StringFilter<"InventoryItem"> | string
    sku?: StringFilter<"InventoryItem"> | string
    name?: StringFilter<"InventoryItem"> | string
    unit?: StringFilter<"InventoryItem"> | string
    qtyFrom1C?: DecimalFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string
    countedQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    correctedQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    deltaQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    note?: StringNullableFilter<"InventoryItem"> | string | null
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
    document?: XOR<InventoryDocumentRelationFilter, InventoryDocumentWhereInput>
    barcodes?: InventoryItemBarcodeListRelationFilter
    changes?: InventoryItemChangeListRelationFilter
  }

  export type InventoryItemOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    qtyFrom1C?: SortOrder
    countedQty?: SortOrderInput | SortOrder
    correctedQty?: SortOrderInput | SortOrder
    deltaQty?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    document?: InventoryDocumentOrderByWithRelationInput
    barcodes?: InventoryItemBarcodeOrderByRelationAggregateInput
    changes?: InventoryItemChangeOrderByRelationAggregateInput
  }

  export type InventoryItemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    documentId_sku?: InventoryItemDocumentIdSkuCompoundUniqueInput
    AND?: InventoryItemWhereInput | InventoryItemWhereInput[]
    OR?: InventoryItemWhereInput[]
    NOT?: InventoryItemWhereInput | InventoryItemWhereInput[]
    documentId?: StringFilter<"InventoryItem"> | string
    sku?: StringFilter<"InventoryItem"> | string
    name?: StringFilter<"InventoryItem"> | string
    unit?: StringFilter<"InventoryItem"> | string
    qtyFrom1C?: DecimalFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string
    countedQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    correctedQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    deltaQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    note?: StringNullableFilter<"InventoryItem"> | string | null
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
    document?: XOR<InventoryDocumentRelationFilter, InventoryDocumentWhereInput>
    barcodes?: InventoryItemBarcodeListRelationFilter
    changes?: InventoryItemChangeListRelationFilter
  }, "id" | "documentId_sku">

  export type InventoryItemOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    qtyFrom1C?: SortOrder
    countedQty?: SortOrderInput | SortOrder
    correctedQty?: SortOrderInput | SortOrder
    deltaQty?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InventoryItemCountOrderByAggregateInput
    _avg?: InventoryItemAvgOrderByAggregateInput
    _max?: InventoryItemMaxOrderByAggregateInput
    _min?: InventoryItemMinOrderByAggregateInput
    _sum?: InventoryItemSumOrderByAggregateInput
  }

  export type InventoryItemScalarWhereWithAggregatesInput = {
    AND?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    OR?: InventoryItemScalarWhereWithAggregatesInput[]
    NOT?: InventoryItemScalarWhereWithAggregatesInput | InventoryItemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryItem"> | string
    documentId?: StringWithAggregatesFilter<"InventoryItem"> | string
    sku?: StringWithAggregatesFilter<"InventoryItem"> | string
    name?: StringWithAggregatesFilter<"InventoryItem"> | string
    unit?: StringWithAggregatesFilter<"InventoryItem"> | string
    qtyFrom1C?: DecimalWithAggregatesFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string
    countedQty?: DecimalNullableWithAggregatesFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    correctedQty?: DecimalNullableWithAggregatesFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    deltaQty?: DecimalNullableWithAggregatesFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    note?: StringNullableWithAggregatesFilter<"InventoryItem"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"InventoryItem"> | Date | string
  }

  export type InventoryItemBarcodeWhereInput = {
    AND?: InventoryItemBarcodeWhereInput | InventoryItemBarcodeWhereInput[]
    OR?: InventoryItemBarcodeWhereInput[]
    NOT?: InventoryItemBarcodeWhereInput | InventoryItemBarcodeWhereInput[]
    id?: StringFilter<"InventoryItemBarcode"> | string
    documentId?: StringFilter<"InventoryItemBarcode"> | string
    itemId?: StringFilter<"InventoryItemBarcode"> | string
    barcode?: StringFilter<"InventoryItemBarcode"> | string
    isPrimary?: BoolFilter<"InventoryItemBarcode"> | boolean
    document?: XOR<InventoryDocumentRelationFilter, InventoryDocumentWhereInput>
    item?: XOR<InventoryItemRelationFilter, InventoryItemWhereInput>
  }

  export type InventoryItemBarcodeOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    barcode?: SortOrder
    isPrimary?: SortOrder
    document?: InventoryDocumentOrderByWithRelationInput
    item?: InventoryItemOrderByWithRelationInput
  }

  export type InventoryItemBarcodeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    documentId_barcode?: InventoryItemBarcodeDocumentIdBarcodeCompoundUniqueInput
    AND?: InventoryItemBarcodeWhereInput | InventoryItemBarcodeWhereInput[]
    OR?: InventoryItemBarcodeWhereInput[]
    NOT?: InventoryItemBarcodeWhereInput | InventoryItemBarcodeWhereInput[]
    documentId?: StringFilter<"InventoryItemBarcode"> | string
    itemId?: StringFilter<"InventoryItemBarcode"> | string
    barcode?: StringFilter<"InventoryItemBarcode"> | string
    isPrimary?: BoolFilter<"InventoryItemBarcode"> | boolean
    document?: XOR<InventoryDocumentRelationFilter, InventoryDocumentWhereInput>
    item?: XOR<InventoryItemRelationFilter, InventoryItemWhereInput>
  }, "id" | "documentId_barcode">

  export type InventoryItemBarcodeOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    barcode?: SortOrder
    isPrimary?: SortOrder
    _count?: InventoryItemBarcodeCountOrderByAggregateInput
    _max?: InventoryItemBarcodeMaxOrderByAggregateInput
    _min?: InventoryItemBarcodeMinOrderByAggregateInput
  }

  export type InventoryItemBarcodeScalarWhereWithAggregatesInput = {
    AND?: InventoryItemBarcodeScalarWhereWithAggregatesInput | InventoryItemBarcodeScalarWhereWithAggregatesInput[]
    OR?: InventoryItemBarcodeScalarWhereWithAggregatesInput[]
    NOT?: InventoryItemBarcodeScalarWhereWithAggregatesInput | InventoryItemBarcodeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryItemBarcode"> | string
    documentId?: StringWithAggregatesFilter<"InventoryItemBarcode"> | string
    itemId?: StringWithAggregatesFilter<"InventoryItemBarcode"> | string
    barcode?: StringWithAggregatesFilter<"InventoryItemBarcode"> | string
    isPrimary?: BoolWithAggregatesFilter<"InventoryItemBarcode"> | boolean
  }

  export type InventoryItemChangeWhereInput = {
    AND?: InventoryItemChangeWhereInput | InventoryItemChangeWhereInput[]
    OR?: InventoryItemChangeWhereInput[]
    NOT?: InventoryItemChangeWhereInput | InventoryItemChangeWhereInput[]
    id?: StringFilter<"InventoryItemChange"> | string
    documentId?: StringFilter<"InventoryItemChange"> | string
    itemId?: StringFilter<"InventoryItemChange"> | string
    deviceId?: StringFilter<"InventoryItemChange"> | string
    countedQty?: DecimalNullableFilter<"InventoryItemChange"> | Decimal | DecimalJsLike | number | string | null
    correctedQty?: DecimalNullableFilter<"InventoryItemChange"> | Decimal | DecimalJsLike | number | string | null
    note?: StringNullableFilter<"InventoryItemChange"> | string | null
    createdAt?: DateTimeFilter<"InventoryItemChange"> | Date | string
    document?: XOR<InventoryDocumentRelationFilter, InventoryDocumentWhereInput>
    item?: XOR<InventoryItemRelationFilter, InventoryItemWhereInput>
  }

  export type InventoryItemChangeOrderByWithRelationInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    deviceId?: SortOrder
    countedQty?: SortOrderInput | SortOrder
    correctedQty?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    document?: InventoryDocumentOrderByWithRelationInput
    item?: InventoryItemOrderByWithRelationInput
  }

  export type InventoryItemChangeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: InventoryItemChangeWhereInput | InventoryItemChangeWhereInput[]
    OR?: InventoryItemChangeWhereInput[]
    NOT?: InventoryItemChangeWhereInput | InventoryItemChangeWhereInput[]
    documentId?: StringFilter<"InventoryItemChange"> | string
    itemId?: StringFilter<"InventoryItemChange"> | string
    deviceId?: StringFilter<"InventoryItemChange"> | string
    countedQty?: DecimalNullableFilter<"InventoryItemChange"> | Decimal | DecimalJsLike | number | string | null
    correctedQty?: DecimalNullableFilter<"InventoryItemChange"> | Decimal | DecimalJsLike | number | string | null
    note?: StringNullableFilter<"InventoryItemChange"> | string | null
    createdAt?: DateTimeFilter<"InventoryItemChange"> | Date | string
    document?: XOR<InventoryDocumentRelationFilter, InventoryDocumentWhereInput>
    item?: XOR<InventoryItemRelationFilter, InventoryItemWhereInput>
  }, "id">

  export type InventoryItemChangeOrderByWithAggregationInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    deviceId?: SortOrder
    countedQty?: SortOrderInput | SortOrder
    correctedQty?: SortOrderInput | SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: InventoryItemChangeCountOrderByAggregateInput
    _avg?: InventoryItemChangeAvgOrderByAggregateInput
    _max?: InventoryItemChangeMaxOrderByAggregateInput
    _min?: InventoryItemChangeMinOrderByAggregateInput
    _sum?: InventoryItemChangeSumOrderByAggregateInput
  }

  export type InventoryItemChangeScalarWhereWithAggregatesInput = {
    AND?: InventoryItemChangeScalarWhereWithAggregatesInput | InventoryItemChangeScalarWhereWithAggregatesInput[]
    OR?: InventoryItemChangeScalarWhereWithAggregatesInput[]
    NOT?: InventoryItemChangeScalarWhereWithAggregatesInput | InventoryItemChangeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"InventoryItemChange"> | string
    documentId?: StringWithAggregatesFilter<"InventoryItemChange"> | string
    itemId?: StringWithAggregatesFilter<"InventoryItemChange"> | string
    deviceId?: StringWithAggregatesFilter<"InventoryItemChange"> | string
    countedQty?: DecimalNullableWithAggregatesFilter<"InventoryItemChange"> | Decimal | DecimalJsLike | number | string | null
    correctedQty?: DecimalNullableWithAggregatesFilter<"InventoryItemChange"> | Decimal | DecimalJsLike | number | string | null
    note?: StringNullableWithAggregatesFilter<"InventoryItemChange"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"InventoryItemChange"> | Date | string
  }

  export type WarehouseCreateInput = {
    id?: string
    code: string
    name: string
    docs?: InventoryDocumentCreateNestedManyWithoutWarehouseInput
  }

  export type WarehouseUncheckedCreateInput = {
    id?: string
    code: string
    name: string
    docs?: InventoryDocumentUncheckedCreateNestedManyWithoutWarehouseInput
  }

  export type WarehouseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    docs?: InventoryDocumentUpdateManyWithoutWarehouseNestedInput
  }

  export type WarehouseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    docs?: InventoryDocumentUncheckedUpdateManyWithoutWarehouseNestedInput
  }

  export type WarehouseCreateManyInput = {
    id?: string
    code: string
    name: string
  }

  export type WarehouseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WarehouseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InventoryDocumentCreateInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehouse: WarehouseCreateNestedOneWithoutDocsInput
    items?: InventoryItemCreateNestedManyWithoutDocumentInput
    barcodes?: InventoryItemBarcodeCreateNestedManyWithoutDocumentInput
    changes?: InventoryItemChangeCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentUncheckedCreateInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseId: string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InventoryItemUncheckedCreateNestedManyWithoutDocumentInput
    barcodes?: InventoryItemBarcodeUncheckedCreateNestedManyWithoutDocumentInput
    changes?: InventoryItemChangeUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouse?: WarehouseUpdateOneRequiredWithoutDocsNestedInput
    items?: InventoryItemUpdateManyWithoutDocumentNestedInput
    barcodes?: InventoryItemBarcodeUpdateManyWithoutDocumentNestedInput
    changes?: InventoryItemChangeUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InventoryItemUncheckedUpdateManyWithoutDocumentNestedInput
    barcodes?: InventoryItemBarcodeUncheckedUpdateManyWithoutDocumentNestedInput
    changes?: InventoryItemChangeUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryDocumentCreateManyInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseId: string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemCreateInput = {
    id?: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    document: InventoryDocumentCreateNestedOneWithoutItemsInput
    barcodes?: InventoryItemBarcodeCreateNestedManyWithoutItemInput
    changes?: InventoryItemChangeCreateNestedManyWithoutItemInput
  }

  export type InventoryItemUncheckedCreateInput = {
    id?: string
    documentId: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    barcodes?: InventoryItemBarcodeUncheckedCreateNestedManyWithoutItemInput
    changes?: InventoryItemChangeUncheckedCreateNestedManyWithoutItemInput
  }

  export type InventoryItemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: InventoryDocumentUpdateOneRequiredWithoutItemsNestedInput
    barcodes?: InventoryItemBarcodeUpdateManyWithoutItemNestedInput
    changes?: InventoryItemChangeUpdateManyWithoutItemNestedInput
  }

  export type InventoryItemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barcodes?: InventoryItemBarcodeUncheckedUpdateManyWithoutItemNestedInput
    changes?: InventoryItemChangeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type InventoryItemCreateManyInput = {
    id?: string
    documentId: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemBarcodeCreateInput = {
    id?: string
    barcode: string
    isPrimary?: boolean
    document: InventoryDocumentCreateNestedOneWithoutBarcodesInput
    item: InventoryItemCreateNestedOneWithoutBarcodesInput
  }

  export type InventoryItemBarcodeUncheckedCreateInput = {
    id?: string
    documentId: string
    itemId: string
    barcode: string
    isPrimary?: boolean
  }

  export type InventoryItemBarcodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    document?: InventoryDocumentUpdateOneRequiredWithoutBarcodesNestedInput
    item?: InventoryItemUpdateOneRequiredWithoutBarcodesNestedInput
  }

  export type InventoryItemBarcodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryItemBarcodeCreateManyInput = {
    id?: string
    documentId: string
    itemId: string
    barcode: string
    isPrimary?: boolean
  }

  export type InventoryItemBarcodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryItemBarcodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryItemChangeCreateInput = {
    id?: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    document: InventoryDocumentCreateNestedOneWithoutChangesInput
    item: InventoryItemCreateNestedOneWithoutChangesInput
  }

  export type InventoryItemChangeUncheckedCreateInput = {
    id?: string
    documentId: string
    itemId: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
  }

  export type InventoryItemChangeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: InventoryDocumentUpdateOneRequiredWithoutChangesNestedInput
    item?: InventoryItemUpdateOneRequiredWithoutChangesNestedInput
  }

  export type InventoryItemChangeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemChangeCreateManyInput = {
    id?: string
    documentId: string
    itemId: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
  }

  export type InventoryItemChangeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemChangeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type InventoryDocumentListRelationFilter = {
    every?: InventoryDocumentWhereInput
    some?: InventoryDocumentWhereInput
    none?: InventoryDocumentWhereInput
  }

  export type InventoryDocumentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WarehouseCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type WarehouseMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type WarehouseMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumDocStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DocStatus | EnumDocStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocStatus[]
    notIn?: $Enums.DocStatus[]
    not?: NestedEnumDocStatusFilter<$PrismaModel> | $Enums.DocStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type WarehouseRelationFilter = {
    is?: WarehouseWhereInput
    isNot?: WarehouseWhereInput
  }

  export type InventoryItemListRelationFilter = {
    every?: InventoryItemWhereInput
    some?: InventoryItemWhereInput
    none?: InventoryItemWhereInput
  }

  export type InventoryItemBarcodeListRelationFilter = {
    every?: InventoryItemBarcodeWhereInput
    some?: InventoryItemBarcodeWhereInput
    none?: InventoryItemBarcodeWhereInput
  }

  export type InventoryItemChangeListRelationFilter = {
    every?: InventoryItemChangeWhereInput
    some?: InventoryItemChangeWhereInput
    none?: InventoryItemChangeWhereInput
  }

  export type InventoryItemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryItemBarcodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryItemChangeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InventoryDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    externalId?: SortOrder
    onecNumber?: SortOrder
    onecDate?: SortOrder
    warehouseId?: SortOrder
    warehouseCode?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryDocumentAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type InventoryDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    externalId?: SortOrder
    onecNumber?: SortOrder
    onecDate?: SortOrder
    warehouseId?: SortOrder
    warehouseCode?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    externalId?: SortOrder
    onecNumber?: SortOrder
    onecDate?: SortOrder
    warehouseId?: SortOrder
    warehouseCode?: SortOrder
    status?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryDocumentSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumDocStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocStatus | EnumDocStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocStatus[]
    notIn?: $Enums.DocStatus[]
    not?: NestedEnumDocStatusWithAggregatesFilter<$PrismaModel> | $Enums.DocStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocStatusFilter<$PrismaModel>
    _max?: NestedEnumDocStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type InventoryDocumentRelationFilter = {
    is?: InventoryDocumentWhereInput
    isNot?: InventoryDocumentWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InventoryItemDocumentIdSkuCompoundUniqueInput = {
    documentId: string
    sku: string
  }

  export type InventoryItemCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    qtyFrom1C?: SortOrder
    countedQty?: SortOrder
    correctedQty?: SortOrder
    deltaQty?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemAvgOrderByAggregateInput = {
    qtyFrom1C?: SortOrder
    countedQty?: SortOrder
    correctedQty?: SortOrder
    deltaQty?: SortOrder
  }

  export type InventoryItemMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    qtyFrom1C?: SortOrder
    countedQty?: SortOrder
    correctedQty?: SortOrder
    deltaQty?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    sku?: SortOrder
    name?: SortOrder
    unit?: SortOrder
    qtyFrom1C?: SortOrder
    countedQty?: SortOrder
    correctedQty?: SortOrder
    deltaQty?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InventoryItemSumOrderByAggregateInput = {
    qtyFrom1C?: SortOrder
    countedQty?: SortOrder
    correctedQty?: SortOrder
    deltaQty?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type InventoryItemRelationFilter = {
    is?: InventoryItemWhereInput
    isNot?: InventoryItemWhereInput
  }

  export type InventoryItemBarcodeDocumentIdBarcodeCompoundUniqueInput = {
    documentId: string
    barcode: string
  }

  export type InventoryItemBarcodeCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    barcode?: SortOrder
    isPrimary?: SortOrder
  }

  export type InventoryItemBarcodeMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    barcode?: SortOrder
    isPrimary?: SortOrder
  }

  export type InventoryItemBarcodeMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    barcode?: SortOrder
    isPrimary?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type InventoryItemChangeCountOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    deviceId?: SortOrder
    countedQty?: SortOrder
    correctedQty?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type InventoryItemChangeAvgOrderByAggregateInput = {
    countedQty?: SortOrder
    correctedQty?: SortOrder
  }

  export type InventoryItemChangeMaxOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    deviceId?: SortOrder
    countedQty?: SortOrder
    correctedQty?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type InventoryItemChangeMinOrderByAggregateInput = {
    id?: SortOrder
    documentId?: SortOrder
    itemId?: SortOrder
    deviceId?: SortOrder
    countedQty?: SortOrder
    correctedQty?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type InventoryItemChangeSumOrderByAggregateInput = {
    countedQty?: SortOrder
    correctedQty?: SortOrder
  }

  export type InventoryDocumentCreateNestedManyWithoutWarehouseInput = {
    create?: XOR<InventoryDocumentCreateWithoutWarehouseInput, InventoryDocumentUncheckedCreateWithoutWarehouseInput> | InventoryDocumentCreateWithoutWarehouseInput[] | InventoryDocumentUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutWarehouseInput | InventoryDocumentCreateOrConnectWithoutWarehouseInput[]
    createMany?: InventoryDocumentCreateManyWarehouseInputEnvelope
    connect?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
  }

  export type InventoryDocumentUncheckedCreateNestedManyWithoutWarehouseInput = {
    create?: XOR<InventoryDocumentCreateWithoutWarehouseInput, InventoryDocumentUncheckedCreateWithoutWarehouseInput> | InventoryDocumentCreateWithoutWarehouseInput[] | InventoryDocumentUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutWarehouseInput | InventoryDocumentCreateOrConnectWithoutWarehouseInput[]
    createMany?: InventoryDocumentCreateManyWarehouseInputEnvelope
    connect?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type InventoryDocumentUpdateManyWithoutWarehouseNestedInput = {
    create?: XOR<InventoryDocumentCreateWithoutWarehouseInput, InventoryDocumentUncheckedCreateWithoutWarehouseInput> | InventoryDocumentCreateWithoutWarehouseInput[] | InventoryDocumentUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutWarehouseInput | InventoryDocumentCreateOrConnectWithoutWarehouseInput[]
    upsert?: InventoryDocumentUpsertWithWhereUniqueWithoutWarehouseInput | InventoryDocumentUpsertWithWhereUniqueWithoutWarehouseInput[]
    createMany?: InventoryDocumentCreateManyWarehouseInputEnvelope
    set?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
    disconnect?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
    delete?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
    connect?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
    update?: InventoryDocumentUpdateWithWhereUniqueWithoutWarehouseInput | InventoryDocumentUpdateWithWhereUniqueWithoutWarehouseInput[]
    updateMany?: InventoryDocumentUpdateManyWithWhereWithoutWarehouseInput | InventoryDocumentUpdateManyWithWhereWithoutWarehouseInput[]
    deleteMany?: InventoryDocumentScalarWhereInput | InventoryDocumentScalarWhereInput[]
  }

  export type InventoryDocumentUncheckedUpdateManyWithoutWarehouseNestedInput = {
    create?: XOR<InventoryDocumentCreateWithoutWarehouseInput, InventoryDocumentUncheckedCreateWithoutWarehouseInput> | InventoryDocumentCreateWithoutWarehouseInput[] | InventoryDocumentUncheckedCreateWithoutWarehouseInput[]
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutWarehouseInput | InventoryDocumentCreateOrConnectWithoutWarehouseInput[]
    upsert?: InventoryDocumentUpsertWithWhereUniqueWithoutWarehouseInput | InventoryDocumentUpsertWithWhereUniqueWithoutWarehouseInput[]
    createMany?: InventoryDocumentCreateManyWarehouseInputEnvelope
    set?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
    disconnect?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
    delete?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
    connect?: InventoryDocumentWhereUniqueInput | InventoryDocumentWhereUniqueInput[]
    update?: InventoryDocumentUpdateWithWhereUniqueWithoutWarehouseInput | InventoryDocumentUpdateWithWhereUniqueWithoutWarehouseInput[]
    updateMany?: InventoryDocumentUpdateManyWithWhereWithoutWarehouseInput | InventoryDocumentUpdateManyWithWhereWithoutWarehouseInput[]
    deleteMany?: InventoryDocumentScalarWhereInput | InventoryDocumentScalarWhereInput[]
  }

  export type WarehouseCreateNestedOneWithoutDocsInput = {
    create?: XOR<WarehouseCreateWithoutDocsInput, WarehouseUncheckedCreateWithoutDocsInput>
    connectOrCreate?: WarehouseCreateOrConnectWithoutDocsInput
    connect?: WarehouseWhereUniqueInput
  }

  export type InventoryItemCreateNestedManyWithoutDocumentInput = {
    create?: XOR<InventoryItemCreateWithoutDocumentInput, InventoryItemUncheckedCreateWithoutDocumentInput> | InventoryItemCreateWithoutDocumentInput[] | InventoryItemUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutDocumentInput | InventoryItemCreateOrConnectWithoutDocumentInput[]
    createMany?: InventoryItemCreateManyDocumentInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type InventoryItemBarcodeCreateNestedManyWithoutDocumentInput = {
    create?: XOR<InventoryItemBarcodeCreateWithoutDocumentInput, InventoryItemBarcodeUncheckedCreateWithoutDocumentInput> | InventoryItemBarcodeCreateWithoutDocumentInput[] | InventoryItemBarcodeUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemBarcodeCreateOrConnectWithoutDocumentInput | InventoryItemBarcodeCreateOrConnectWithoutDocumentInput[]
    createMany?: InventoryItemBarcodeCreateManyDocumentInputEnvelope
    connect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
  }

  export type InventoryItemChangeCreateNestedManyWithoutDocumentInput = {
    create?: XOR<InventoryItemChangeCreateWithoutDocumentInput, InventoryItemChangeUncheckedCreateWithoutDocumentInput> | InventoryItemChangeCreateWithoutDocumentInput[] | InventoryItemChangeUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemChangeCreateOrConnectWithoutDocumentInput | InventoryItemChangeCreateOrConnectWithoutDocumentInput[]
    createMany?: InventoryItemChangeCreateManyDocumentInputEnvelope
    connect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
  }

  export type InventoryItemUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<InventoryItemCreateWithoutDocumentInput, InventoryItemUncheckedCreateWithoutDocumentInput> | InventoryItemCreateWithoutDocumentInput[] | InventoryItemUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutDocumentInput | InventoryItemCreateOrConnectWithoutDocumentInput[]
    createMany?: InventoryItemCreateManyDocumentInputEnvelope
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
  }

  export type InventoryItemBarcodeUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<InventoryItemBarcodeCreateWithoutDocumentInput, InventoryItemBarcodeUncheckedCreateWithoutDocumentInput> | InventoryItemBarcodeCreateWithoutDocumentInput[] | InventoryItemBarcodeUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemBarcodeCreateOrConnectWithoutDocumentInput | InventoryItemBarcodeCreateOrConnectWithoutDocumentInput[]
    createMany?: InventoryItemBarcodeCreateManyDocumentInputEnvelope
    connect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
  }

  export type InventoryItemChangeUncheckedCreateNestedManyWithoutDocumentInput = {
    create?: XOR<InventoryItemChangeCreateWithoutDocumentInput, InventoryItemChangeUncheckedCreateWithoutDocumentInput> | InventoryItemChangeCreateWithoutDocumentInput[] | InventoryItemChangeUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemChangeCreateOrConnectWithoutDocumentInput | InventoryItemChangeCreateOrConnectWithoutDocumentInput[]
    createMany?: InventoryItemChangeCreateManyDocumentInputEnvelope
    connect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EnumDocStatusFieldUpdateOperationsInput = {
    set?: $Enums.DocStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WarehouseUpdateOneRequiredWithoutDocsNestedInput = {
    create?: XOR<WarehouseCreateWithoutDocsInput, WarehouseUncheckedCreateWithoutDocsInput>
    connectOrCreate?: WarehouseCreateOrConnectWithoutDocsInput
    upsert?: WarehouseUpsertWithoutDocsInput
    connect?: WarehouseWhereUniqueInput
    update?: XOR<XOR<WarehouseUpdateToOneWithWhereWithoutDocsInput, WarehouseUpdateWithoutDocsInput>, WarehouseUncheckedUpdateWithoutDocsInput>
  }

  export type InventoryItemUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<InventoryItemCreateWithoutDocumentInput, InventoryItemUncheckedCreateWithoutDocumentInput> | InventoryItemCreateWithoutDocumentInput[] | InventoryItemUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutDocumentInput | InventoryItemCreateOrConnectWithoutDocumentInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutDocumentInput | InventoryItemUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: InventoryItemCreateManyDocumentInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutDocumentInput | InventoryItemUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutDocumentInput | InventoryItemUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type InventoryItemBarcodeUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<InventoryItemBarcodeCreateWithoutDocumentInput, InventoryItemBarcodeUncheckedCreateWithoutDocumentInput> | InventoryItemBarcodeCreateWithoutDocumentInput[] | InventoryItemBarcodeUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemBarcodeCreateOrConnectWithoutDocumentInput | InventoryItemBarcodeCreateOrConnectWithoutDocumentInput[]
    upsert?: InventoryItemBarcodeUpsertWithWhereUniqueWithoutDocumentInput | InventoryItemBarcodeUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: InventoryItemBarcodeCreateManyDocumentInputEnvelope
    set?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    disconnect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    delete?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    connect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    update?: InventoryItemBarcodeUpdateWithWhereUniqueWithoutDocumentInput | InventoryItemBarcodeUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: InventoryItemBarcodeUpdateManyWithWhereWithoutDocumentInput | InventoryItemBarcodeUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: InventoryItemBarcodeScalarWhereInput | InventoryItemBarcodeScalarWhereInput[]
  }

  export type InventoryItemChangeUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<InventoryItemChangeCreateWithoutDocumentInput, InventoryItemChangeUncheckedCreateWithoutDocumentInput> | InventoryItemChangeCreateWithoutDocumentInput[] | InventoryItemChangeUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemChangeCreateOrConnectWithoutDocumentInput | InventoryItemChangeCreateOrConnectWithoutDocumentInput[]
    upsert?: InventoryItemChangeUpsertWithWhereUniqueWithoutDocumentInput | InventoryItemChangeUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: InventoryItemChangeCreateManyDocumentInputEnvelope
    set?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    disconnect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    delete?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    connect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    update?: InventoryItemChangeUpdateWithWhereUniqueWithoutDocumentInput | InventoryItemChangeUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: InventoryItemChangeUpdateManyWithWhereWithoutDocumentInput | InventoryItemChangeUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: InventoryItemChangeScalarWhereInput | InventoryItemChangeScalarWhereInput[]
  }

  export type InventoryItemUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<InventoryItemCreateWithoutDocumentInput, InventoryItemUncheckedCreateWithoutDocumentInput> | InventoryItemCreateWithoutDocumentInput[] | InventoryItemUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemCreateOrConnectWithoutDocumentInput | InventoryItemCreateOrConnectWithoutDocumentInput[]
    upsert?: InventoryItemUpsertWithWhereUniqueWithoutDocumentInput | InventoryItemUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: InventoryItemCreateManyDocumentInputEnvelope
    set?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    disconnect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    delete?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    connect?: InventoryItemWhereUniqueInput | InventoryItemWhereUniqueInput[]
    update?: InventoryItemUpdateWithWhereUniqueWithoutDocumentInput | InventoryItemUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: InventoryItemUpdateManyWithWhereWithoutDocumentInput | InventoryItemUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
  }

  export type InventoryItemBarcodeUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<InventoryItemBarcodeCreateWithoutDocumentInput, InventoryItemBarcodeUncheckedCreateWithoutDocumentInput> | InventoryItemBarcodeCreateWithoutDocumentInput[] | InventoryItemBarcodeUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemBarcodeCreateOrConnectWithoutDocumentInput | InventoryItemBarcodeCreateOrConnectWithoutDocumentInput[]
    upsert?: InventoryItemBarcodeUpsertWithWhereUniqueWithoutDocumentInput | InventoryItemBarcodeUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: InventoryItemBarcodeCreateManyDocumentInputEnvelope
    set?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    disconnect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    delete?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    connect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    update?: InventoryItemBarcodeUpdateWithWhereUniqueWithoutDocumentInput | InventoryItemBarcodeUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: InventoryItemBarcodeUpdateManyWithWhereWithoutDocumentInput | InventoryItemBarcodeUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: InventoryItemBarcodeScalarWhereInput | InventoryItemBarcodeScalarWhereInput[]
  }

  export type InventoryItemChangeUncheckedUpdateManyWithoutDocumentNestedInput = {
    create?: XOR<InventoryItemChangeCreateWithoutDocumentInput, InventoryItemChangeUncheckedCreateWithoutDocumentInput> | InventoryItemChangeCreateWithoutDocumentInput[] | InventoryItemChangeUncheckedCreateWithoutDocumentInput[]
    connectOrCreate?: InventoryItemChangeCreateOrConnectWithoutDocumentInput | InventoryItemChangeCreateOrConnectWithoutDocumentInput[]
    upsert?: InventoryItemChangeUpsertWithWhereUniqueWithoutDocumentInput | InventoryItemChangeUpsertWithWhereUniqueWithoutDocumentInput[]
    createMany?: InventoryItemChangeCreateManyDocumentInputEnvelope
    set?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    disconnect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    delete?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    connect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    update?: InventoryItemChangeUpdateWithWhereUniqueWithoutDocumentInput | InventoryItemChangeUpdateWithWhereUniqueWithoutDocumentInput[]
    updateMany?: InventoryItemChangeUpdateManyWithWhereWithoutDocumentInput | InventoryItemChangeUpdateManyWithWhereWithoutDocumentInput[]
    deleteMany?: InventoryItemChangeScalarWhereInput | InventoryItemChangeScalarWhereInput[]
  }

  export type InventoryDocumentCreateNestedOneWithoutItemsInput = {
    create?: XOR<InventoryDocumentCreateWithoutItemsInput, InventoryDocumentUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutItemsInput
    connect?: InventoryDocumentWhereUniqueInput
  }

  export type InventoryItemBarcodeCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryItemBarcodeCreateWithoutItemInput, InventoryItemBarcodeUncheckedCreateWithoutItemInput> | InventoryItemBarcodeCreateWithoutItemInput[] | InventoryItemBarcodeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemBarcodeCreateOrConnectWithoutItemInput | InventoryItemBarcodeCreateOrConnectWithoutItemInput[]
    createMany?: InventoryItemBarcodeCreateManyItemInputEnvelope
    connect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
  }

  export type InventoryItemChangeCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryItemChangeCreateWithoutItemInput, InventoryItemChangeUncheckedCreateWithoutItemInput> | InventoryItemChangeCreateWithoutItemInput[] | InventoryItemChangeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemChangeCreateOrConnectWithoutItemInput | InventoryItemChangeCreateOrConnectWithoutItemInput[]
    createMany?: InventoryItemChangeCreateManyItemInputEnvelope
    connect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
  }

  export type InventoryItemBarcodeUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryItemBarcodeCreateWithoutItemInput, InventoryItemBarcodeUncheckedCreateWithoutItemInput> | InventoryItemBarcodeCreateWithoutItemInput[] | InventoryItemBarcodeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemBarcodeCreateOrConnectWithoutItemInput | InventoryItemBarcodeCreateOrConnectWithoutItemInput[]
    createMany?: InventoryItemBarcodeCreateManyItemInputEnvelope
    connect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
  }

  export type InventoryItemChangeUncheckedCreateNestedManyWithoutItemInput = {
    create?: XOR<InventoryItemChangeCreateWithoutItemInput, InventoryItemChangeUncheckedCreateWithoutItemInput> | InventoryItemChangeCreateWithoutItemInput[] | InventoryItemChangeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemChangeCreateOrConnectWithoutItemInput | InventoryItemChangeCreateOrConnectWithoutItemInput[]
    createMany?: InventoryItemChangeCreateManyItemInputEnvelope
    connect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type InventoryDocumentUpdateOneRequiredWithoutItemsNestedInput = {
    create?: XOR<InventoryDocumentCreateWithoutItemsInput, InventoryDocumentUncheckedCreateWithoutItemsInput>
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutItemsInput
    upsert?: InventoryDocumentUpsertWithoutItemsInput
    connect?: InventoryDocumentWhereUniqueInput
    update?: XOR<XOR<InventoryDocumentUpdateToOneWithWhereWithoutItemsInput, InventoryDocumentUpdateWithoutItemsInput>, InventoryDocumentUncheckedUpdateWithoutItemsInput>
  }

  export type InventoryItemBarcodeUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryItemBarcodeCreateWithoutItemInput, InventoryItemBarcodeUncheckedCreateWithoutItemInput> | InventoryItemBarcodeCreateWithoutItemInput[] | InventoryItemBarcodeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemBarcodeCreateOrConnectWithoutItemInput | InventoryItemBarcodeCreateOrConnectWithoutItemInput[]
    upsert?: InventoryItemBarcodeUpsertWithWhereUniqueWithoutItemInput | InventoryItemBarcodeUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryItemBarcodeCreateManyItemInputEnvelope
    set?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    disconnect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    delete?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    connect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    update?: InventoryItemBarcodeUpdateWithWhereUniqueWithoutItemInput | InventoryItemBarcodeUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryItemBarcodeUpdateManyWithWhereWithoutItemInput | InventoryItemBarcodeUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryItemBarcodeScalarWhereInput | InventoryItemBarcodeScalarWhereInput[]
  }

  export type InventoryItemChangeUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryItemChangeCreateWithoutItemInput, InventoryItemChangeUncheckedCreateWithoutItemInput> | InventoryItemChangeCreateWithoutItemInput[] | InventoryItemChangeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemChangeCreateOrConnectWithoutItemInput | InventoryItemChangeCreateOrConnectWithoutItemInput[]
    upsert?: InventoryItemChangeUpsertWithWhereUniqueWithoutItemInput | InventoryItemChangeUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryItemChangeCreateManyItemInputEnvelope
    set?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    disconnect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    delete?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    connect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    update?: InventoryItemChangeUpdateWithWhereUniqueWithoutItemInput | InventoryItemChangeUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryItemChangeUpdateManyWithWhereWithoutItemInput | InventoryItemChangeUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryItemChangeScalarWhereInput | InventoryItemChangeScalarWhereInput[]
  }

  export type InventoryItemBarcodeUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryItemBarcodeCreateWithoutItemInput, InventoryItemBarcodeUncheckedCreateWithoutItemInput> | InventoryItemBarcodeCreateWithoutItemInput[] | InventoryItemBarcodeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemBarcodeCreateOrConnectWithoutItemInput | InventoryItemBarcodeCreateOrConnectWithoutItemInput[]
    upsert?: InventoryItemBarcodeUpsertWithWhereUniqueWithoutItemInput | InventoryItemBarcodeUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryItemBarcodeCreateManyItemInputEnvelope
    set?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    disconnect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    delete?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    connect?: InventoryItemBarcodeWhereUniqueInput | InventoryItemBarcodeWhereUniqueInput[]
    update?: InventoryItemBarcodeUpdateWithWhereUniqueWithoutItemInput | InventoryItemBarcodeUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryItemBarcodeUpdateManyWithWhereWithoutItemInput | InventoryItemBarcodeUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryItemBarcodeScalarWhereInput | InventoryItemBarcodeScalarWhereInput[]
  }

  export type InventoryItemChangeUncheckedUpdateManyWithoutItemNestedInput = {
    create?: XOR<InventoryItemChangeCreateWithoutItemInput, InventoryItemChangeUncheckedCreateWithoutItemInput> | InventoryItemChangeCreateWithoutItemInput[] | InventoryItemChangeUncheckedCreateWithoutItemInput[]
    connectOrCreate?: InventoryItemChangeCreateOrConnectWithoutItemInput | InventoryItemChangeCreateOrConnectWithoutItemInput[]
    upsert?: InventoryItemChangeUpsertWithWhereUniqueWithoutItemInput | InventoryItemChangeUpsertWithWhereUniqueWithoutItemInput[]
    createMany?: InventoryItemChangeCreateManyItemInputEnvelope
    set?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    disconnect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    delete?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    connect?: InventoryItemChangeWhereUniqueInput | InventoryItemChangeWhereUniqueInput[]
    update?: InventoryItemChangeUpdateWithWhereUniqueWithoutItemInput | InventoryItemChangeUpdateWithWhereUniqueWithoutItemInput[]
    updateMany?: InventoryItemChangeUpdateManyWithWhereWithoutItemInput | InventoryItemChangeUpdateManyWithWhereWithoutItemInput[]
    deleteMany?: InventoryItemChangeScalarWhereInput | InventoryItemChangeScalarWhereInput[]
  }

  export type InventoryDocumentCreateNestedOneWithoutBarcodesInput = {
    create?: XOR<InventoryDocumentCreateWithoutBarcodesInput, InventoryDocumentUncheckedCreateWithoutBarcodesInput>
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutBarcodesInput
    connect?: InventoryDocumentWhereUniqueInput
  }

  export type InventoryItemCreateNestedOneWithoutBarcodesInput = {
    create?: XOR<InventoryItemCreateWithoutBarcodesInput, InventoryItemUncheckedCreateWithoutBarcodesInput>
    connectOrCreate?: InventoryItemCreateOrConnectWithoutBarcodesInput
    connect?: InventoryItemWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type InventoryDocumentUpdateOneRequiredWithoutBarcodesNestedInput = {
    create?: XOR<InventoryDocumentCreateWithoutBarcodesInput, InventoryDocumentUncheckedCreateWithoutBarcodesInput>
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutBarcodesInput
    upsert?: InventoryDocumentUpsertWithoutBarcodesInput
    connect?: InventoryDocumentWhereUniqueInput
    update?: XOR<XOR<InventoryDocumentUpdateToOneWithWhereWithoutBarcodesInput, InventoryDocumentUpdateWithoutBarcodesInput>, InventoryDocumentUncheckedUpdateWithoutBarcodesInput>
  }

  export type InventoryItemUpdateOneRequiredWithoutBarcodesNestedInput = {
    create?: XOR<InventoryItemCreateWithoutBarcodesInput, InventoryItemUncheckedCreateWithoutBarcodesInput>
    connectOrCreate?: InventoryItemCreateOrConnectWithoutBarcodesInput
    upsert?: InventoryItemUpsertWithoutBarcodesInput
    connect?: InventoryItemWhereUniqueInput
    update?: XOR<XOR<InventoryItemUpdateToOneWithWhereWithoutBarcodesInput, InventoryItemUpdateWithoutBarcodesInput>, InventoryItemUncheckedUpdateWithoutBarcodesInput>
  }

  export type InventoryDocumentCreateNestedOneWithoutChangesInput = {
    create?: XOR<InventoryDocumentCreateWithoutChangesInput, InventoryDocumentUncheckedCreateWithoutChangesInput>
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutChangesInput
    connect?: InventoryDocumentWhereUniqueInput
  }

  export type InventoryItemCreateNestedOneWithoutChangesInput = {
    create?: XOR<InventoryItemCreateWithoutChangesInput, InventoryItemUncheckedCreateWithoutChangesInput>
    connectOrCreate?: InventoryItemCreateOrConnectWithoutChangesInput
    connect?: InventoryItemWhereUniqueInput
  }

  export type InventoryDocumentUpdateOneRequiredWithoutChangesNestedInput = {
    create?: XOR<InventoryDocumentCreateWithoutChangesInput, InventoryDocumentUncheckedCreateWithoutChangesInput>
    connectOrCreate?: InventoryDocumentCreateOrConnectWithoutChangesInput
    upsert?: InventoryDocumentUpsertWithoutChangesInput
    connect?: InventoryDocumentWhereUniqueInput
    update?: XOR<XOR<InventoryDocumentUpdateToOneWithWhereWithoutChangesInput, InventoryDocumentUpdateWithoutChangesInput>, InventoryDocumentUncheckedUpdateWithoutChangesInput>
  }

  export type InventoryItemUpdateOneRequiredWithoutChangesNestedInput = {
    create?: XOR<InventoryItemCreateWithoutChangesInput, InventoryItemUncheckedCreateWithoutChangesInput>
    connectOrCreate?: InventoryItemCreateOrConnectWithoutChangesInput
    upsert?: InventoryItemUpsertWithoutChangesInput
    connect?: InventoryItemWhereUniqueInput
    update?: XOR<XOR<InventoryItemUpdateToOneWithWhereWithoutChangesInput, InventoryItemUpdateWithoutChangesInput>, InventoryItemUncheckedUpdateWithoutChangesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumDocStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DocStatus | EnumDocStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocStatus[]
    notIn?: $Enums.DocStatus[]
    not?: NestedEnumDocStatusFilter<$PrismaModel> | $Enums.DocStatus
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDocStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocStatus | EnumDocStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DocStatus[]
    notIn?: $Enums.DocStatus[]
    not?: NestedEnumDocStatusWithAggregatesFilter<$PrismaModel> | $Enums.DocStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocStatusFilter<$PrismaModel>
    _max?: NestedEnumDocStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type InventoryDocumentCreateWithoutWarehouseInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InventoryItemCreateNestedManyWithoutDocumentInput
    barcodes?: InventoryItemBarcodeCreateNestedManyWithoutDocumentInput
    changes?: InventoryItemChangeCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentUncheckedCreateWithoutWarehouseInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InventoryItemUncheckedCreateNestedManyWithoutDocumentInput
    barcodes?: InventoryItemBarcodeUncheckedCreateNestedManyWithoutDocumentInput
    changes?: InventoryItemChangeUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentCreateOrConnectWithoutWarehouseInput = {
    where: InventoryDocumentWhereUniqueInput
    create: XOR<InventoryDocumentCreateWithoutWarehouseInput, InventoryDocumentUncheckedCreateWithoutWarehouseInput>
  }

  export type InventoryDocumentCreateManyWarehouseInputEnvelope = {
    data: InventoryDocumentCreateManyWarehouseInput | InventoryDocumentCreateManyWarehouseInput[]
    skipDuplicates?: boolean
  }

  export type InventoryDocumentUpsertWithWhereUniqueWithoutWarehouseInput = {
    where: InventoryDocumentWhereUniqueInput
    update: XOR<InventoryDocumentUpdateWithoutWarehouseInput, InventoryDocumentUncheckedUpdateWithoutWarehouseInput>
    create: XOR<InventoryDocumentCreateWithoutWarehouseInput, InventoryDocumentUncheckedCreateWithoutWarehouseInput>
  }

  export type InventoryDocumentUpdateWithWhereUniqueWithoutWarehouseInput = {
    where: InventoryDocumentWhereUniqueInput
    data: XOR<InventoryDocumentUpdateWithoutWarehouseInput, InventoryDocumentUncheckedUpdateWithoutWarehouseInput>
  }

  export type InventoryDocumentUpdateManyWithWhereWithoutWarehouseInput = {
    where: InventoryDocumentScalarWhereInput
    data: XOR<InventoryDocumentUpdateManyMutationInput, InventoryDocumentUncheckedUpdateManyWithoutWarehouseInput>
  }

  export type InventoryDocumentScalarWhereInput = {
    AND?: InventoryDocumentScalarWhereInput | InventoryDocumentScalarWhereInput[]
    OR?: InventoryDocumentScalarWhereInput[]
    NOT?: InventoryDocumentScalarWhereInput | InventoryDocumentScalarWhereInput[]
    id?: StringFilter<"InventoryDocument"> | string
    externalId?: StringFilter<"InventoryDocument"> | string
    onecNumber?: StringFilter<"InventoryDocument"> | string
    onecDate?: DateTimeFilter<"InventoryDocument"> | Date | string
    warehouseId?: StringFilter<"InventoryDocument"> | string
    warehouseCode?: StringFilter<"InventoryDocument"> | string
    status?: EnumDocStatusFilter<"InventoryDocument"> | $Enums.DocStatus
    version?: IntFilter<"InventoryDocument"> | number
    createdAt?: DateTimeFilter<"InventoryDocument"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryDocument"> | Date | string
  }

  export type WarehouseCreateWithoutDocsInput = {
    id?: string
    code: string
    name: string
  }

  export type WarehouseUncheckedCreateWithoutDocsInput = {
    id?: string
    code: string
    name: string
  }

  export type WarehouseCreateOrConnectWithoutDocsInput = {
    where: WarehouseWhereUniqueInput
    create: XOR<WarehouseCreateWithoutDocsInput, WarehouseUncheckedCreateWithoutDocsInput>
  }

  export type InventoryItemCreateWithoutDocumentInput = {
    id?: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    barcodes?: InventoryItemBarcodeCreateNestedManyWithoutItemInput
    changes?: InventoryItemChangeCreateNestedManyWithoutItemInput
  }

  export type InventoryItemUncheckedCreateWithoutDocumentInput = {
    id?: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    barcodes?: InventoryItemBarcodeUncheckedCreateNestedManyWithoutItemInput
    changes?: InventoryItemChangeUncheckedCreateNestedManyWithoutItemInput
  }

  export type InventoryItemCreateOrConnectWithoutDocumentInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutDocumentInput, InventoryItemUncheckedCreateWithoutDocumentInput>
  }

  export type InventoryItemCreateManyDocumentInputEnvelope = {
    data: InventoryItemCreateManyDocumentInput | InventoryItemCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type InventoryItemBarcodeCreateWithoutDocumentInput = {
    id?: string
    barcode: string
    isPrimary?: boolean
    item: InventoryItemCreateNestedOneWithoutBarcodesInput
  }

  export type InventoryItemBarcodeUncheckedCreateWithoutDocumentInput = {
    id?: string
    itemId: string
    barcode: string
    isPrimary?: boolean
  }

  export type InventoryItemBarcodeCreateOrConnectWithoutDocumentInput = {
    where: InventoryItemBarcodeWhereUniqueInput
    create: XOR<InventoryItemBarcodeCreateWithoutDocumentInput, InventoryItemBarcodeUncheckedCreateWithoutDocumentInput>
  }

  export type InventoryItemBarcodeCreateManyDocumentInputEnvelope = {
    data: InventoryItemBarcodeCreateManyDocumentInput | InventoryItemBarcodeCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type InventoryItemChangeCreateWithoutDocumentInput = {
    id?: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    item: InventoryItemCreateNestedOneWithoutChangesInput
  }

  export type InventoryItemChangeUncheckedCreateWithoutDocumentInput = {
    id?: string
    itemId: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
  }

  export type InventoryItemChangeCreateOrConnectWithoutDocumentInput = {
    where: InventoryItemChangeWhereUniqueInput
    create: XOR<InventoryItemChangeCreateWithoutDocumentInput, InventoryItemChangeUncheckedCreateWithoutDocumentInput>
  }

  export type InventoryItemChangeCreateManyDocumentInputEnvelope = {
    data: InventoryItemChangeCreateManyDocumentInput | InventoryItemChangeCreateManyDocumentInput[]
    skipDuplicates?: boolean
  }

  export type WarehouseUpsertWithoutDocsInput = {
    update: XOR<WarehouseUpdateWithoutDocsInput, WarehouseUncheckedUpdateWithoutDocsInput>
    create: XOR<WarehouseCreateWithoutDocsInput, WarehouseUncheckedCreateWithoutDocsInput>
    where?: WarehouseWhereInput
  }

  export type WarehouseUpdateToOneWithWhereWithoutDocsInput = {
    where?: WarehouseWhereInput
    data: XOR<WarehouseUpdateWithoutDocsInput, WarehouseUncheckedUpdateWithoutDocsInput>
  }

  export type WarehouseUpdateWithoutDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type WarehouseUncheckedUpdateWithoutDocsInput = {
    id?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type InventoryItemUpsertWithWhereUniqueWithoutDocumentInput = {
    where: InventoryItemWhereUniqueInput
    update: XOR<InventoryItemUpdateWithoutDocumentInput, InventoryItemUncheckedUpdateWithoutDocumentInput>
    create: XOR<InventoryItemCreateWithoutDocumentInput, InventoryItemUncheckedCreateWithoutDocumentInput>
  }

  export type InventoryItemUpdateWithWhereUniqueWithoutDocumentInput = {
    where: InventoryItemWhereUniqueInput
    data: XOR<InventoryItemUpdateWithoutDocumentInput, InventoryItemUncheckedUpdateWithoutDocumentInput>
  }

  export type InventoryItemUpdateManyWithWhereWithoutDocumentInput = {
    where: InventoryItemScalarWhereInput
    data: XOR<InventoryItemUpdateManyMutationInput, InventoryItemUncheckedUpdateManyWithoutDocumentInput>
  }

  export type InventoryItemScalarWhereInput = {
    AND?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
    OR?: InventoryItemScalarWhereInput[]
    NOT?: InventoryItemScalarWhereInput | InventoryItemScalarWhereInput[]
    id?: StringFilter<"InventoryItem"> | string
    documentId?: StringFilter<"InventoryItem"> | string
    sku?: StringFilter<"InventoryItem"> | string
    name?: StringFilter<"InventoryItem"> | string
    unit?: StringFilter<"InventoryItem"> | string
    qtyFrom1C?: DecimalFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string
    countedQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    correctedQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    deltaQty?: DecimalNullableFilter<"InventoryItem"> | Decimal | DecimalJsLike | number | string | null
    note?: StringNullableFilter<"InventoryItem"> | string | null
    createdAt?: DateTimeFilter<"InventoryItem"> | Date | string
    updatedAt?: DateTimeFilter<"InventoryItem"> | Date | string
  }

  export type InventoryItemBarcodeUpsertWithWhereUniqueWithoutDocumentInput = {
    where: InventoryItemBarcodeWhereUniqueInput
    update: XOR<InventoryItemBarcodeUpdateWithoutDocumentInput, InventoryItemBarcodeUncheckedUpdateWithoutDocumentInput>
    create: XOR<InventoryItemBarcodeCreateWithoutDocumentInput, InventoryItemBarcodeUncheckedCreateWithoutDocumentInput>
  }

  export type InventoryItemBarcodeUpdateWithWhereUniqueWithoutDocumentInput = {
    where: InventoryItemBarcodeWhereUniqueInput
    data: XOR<InventoryItemBarcodeUpdateWithoutDocumentInput, InventoryItemBarcodeUncheckedUpdateWithoutDocumentInput>
  }

  export type InventoryItemBarcodeUpdateManyWithWhereWithoutDocumentInput = {
    where: InventoryItemBarcodeScalarWhereInput
    data: XOR<InventoryItemBarcodeUpdateManyMutationInput, InventoryItemBarcodeUncheckedUpdateManyWithoutDocumentInput>
  }

  export type InventoryItemBarcodeScalarWhereInput = {
    AND?: InventoryItemBarcodeScalarWhereInput | InventoryItemBarcodeScalarWhereInput[]
    OR?: InventoryItemBarcodeScalarWhereInput[]
    NOT?: InventoryItemBarcodeScalarWhereInput | InventoryItemBarcodeScalarWhereInput[]
    id?: StringFilter<"InventoryItemBarcode"> | string
    documentId?: StringFilter<"InventoryItemBarcode"> | string
    itemId?: StringFilter<"InventoryItemBarcode"> | string
    barcode?: StringFilter<"InventoryItemBarcode"> | string
    isPrimary?: BoolFilter<"InventoryItemBarcode"> | boolean
  }

  export type InventoryItemChangeUpsertWithWhereUniqueWithoutDocumentInput = {
    where: InventoryItemChangeWhereUniqueInput
    update: XOR<InventoryItemChangeUpdateWithoutDocumentInput, InventoryItemChangeUncheckedUpdateWithoutDocumentInput>
    create: XOR<InventoryItemChangeCreateWithoutDocumentInput, InventoryItemChangeUncheckedCreateWithoutDocumentInput>
  }

  export type InventoryItemChangeUpdateWithWhereUniqueWithoutDocumentInput = {
    where: InventoryItemChangeWhereUniqueInput
    data: XOR<InventoryItemChangeUpdateWithoutDocumentInput, InventoryItemChangeUncheckedUpdateWithoutDocumentInput>
  }

  export type InventoryItemChangeUpdateManyWithWhereWithoutDocumentInput = {
    where: InventoryItemChangeScalarWhereInput
    data: XOR<InventoryItemChangeUpdateManyMutationInput, InventoryItemChangeUncheckedUpdateManyWithoutDocumentInput>
  }

  export type InventoryItemChangeScalarWhereInput = {
    AND?: InventoryItemChangeScalarWhereInput | InventoryItemChangeScalarWhereInput[]
    OR?: InventoryItemChangeScalarWhereInput[]
    NOT?: InventoryItemChangeScalarWhereInput | InventoryItemChangeScalarWhereInput[]
    id?: StringFilter<"InventoryItemChange"> | string
    documentId?: StringFilter<"InventoryItemChange"> | string
    itemId?: StringFilter<"InventoryItemChange"> | string
    deviceId?: StringFilter<"InventoryItemChange"> | string
    countedQty?: DecimalNullableFilter<"InventoryItemChange"> | Decimal | DecimalJsLike | number | string | null
    correctedQty?: DecimalNullableFilter<"InventoryItemChange"> | Decimal | DecimalJsLike | number | string | null
    note?: StringNullableFilter<"InventoryItemChange"> | string | null
    createdAt?: DateTimeFilter<"InventoryItemChange"> | Date | string
  }

  export type InventoryDocumentCreateWithoutItemsInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehouse: WarehouseCreateNestedOneWithoutDocsInput
    barcodes?: InventoryItemBarcodeCreateNestedManyWithoutDocumentInput
    changes?: InventoryItemChangeCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentUncheckedCreateWithoutItemsInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseId: string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    barcodes?: InventoryItemBarcodeUncheckedCreateNestedManyWithoutDocumentInput
    changes?: InventoryItemChangeUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentCreateOrConnectWithoutItemsInput = {
    where: InventoryDocumentWhereUniqueInput
    create: XOR<InventoryDocumentCreateWithoutItemsInput, InventoryDocumentUncheckedCreateWithoutItemsInput>
  }

  export type InventoryItemBarcodeCreateWithoutItemInput = {
    id?: string
    barcode: string
    isPrimary?: boolean
    document: InventoryDocumentCreateNestedOneWithoutBarcodesInput
  }

  export type InventoryItemBarcodeUncheckedCreateWithoutItemInput = {
    id?: string
    documentId: string
    barcode: string
    isPrimary?: boolean
  }

  export type InventoryItemBarcodeCreateOrConnectWithoutItemInput = {
    where: InventoryItemBarcodeWhereUniqueInput
    create: XOR<InventoryItemBarcodeCreateWithoutItemInput, InventoryItemBarcodeUncheckedCreateWithoutItemInput>
  }

  export type InventoryItemBarcodeCreateManyItemInputEnvelope = {
    data: InventoryItemBarcodeCreateManyItemInput | InventoryItemBarcodeCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type InventoryItemChangeCreateWithoutItemInput = {
    id?: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    document: InventoryDocumentCreateNestedOneWithoutChangesInput
  }

  export type InventoryItemChangeUncheckedCreateWithoutItemInput = {
    id?: string
    documentId: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
  }

  export type InventoryItemChangeCreateOrConnectWithoutItemInput = {
    where: InventoryItemChangeWhereUniqueInput
    create: XOR<InventoryItemChangeCreateWithoutItemInput, InventoryItemChangeUncheckedCreateWithoutItemInput>
  }

  export type InventoryItemChangeCreateManyItemInputEnvelope = {
    data: InventoryItemChangeCreateManyItemInput | InventoryItemChangeCreateManyItemInput[]
    skipDuplicates?: boolean
  }

  export type InventoryDocumentUpsertWithoutItemsInput = {
    update: XOR<InventoryDocumentUpdateWithoutItemsInput, InventoryDocumentUncheckedUpdateWithoutItemsInput>
    create: XOR<InventoryDocumentCreateWithoutItemsInput, InventoryDocumentUncheckedCreateWithoutItemsInput>
    where?: InventoryDocumentWhereInput
  }

  export type InventoryDocumentUpdateToOneWithWhereWithoutItemsInput = {
    where?: InventoryDocumentWhereInput
    data: XOR<InventoryDocumentUpdateWithoutItemsInput, InventoryDocumentUncheckedUpdateWithoutItemsInput>
  }

  export type InventoryDocumentUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouse?: WarehouseUpdateOneRequiredWithoutDocsNestedInput
    barcodes?: InventoryItemBarcodeUpdateManyWithoutDocumentNestedInput
    changes?: InventoryItemChangeUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryDocumentUncheckedUpdateWithoutItemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barcodes?: InventoryItemBarcodeUncheckedUpdateManyWithoutDocumentNestedInput
    changes?: InventoryItemChangeUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryItemBarcodeUpsertWithWhereUniqueWithoutItemInput = {
    where: InventoryItemBarcodeWhereUniqueInput
    update: XOR<InventoryItemBarcodeUpdateWithoutItemInput, InventoryItemBarcodeUncheckedUpdateWithoutItemInput>
    create: XOR<InventoryItemBarcodeCreateWithoutItemInput, InventoryItemBarcodeUncheckedCreateWithoutItemInput>
  }

  export type InventoryItemBarcodeUpdateWithWhereUniqueWithoutItemInput = {
    where: InventoryItemBarcodeWhereUniqueInput
    data: XOR<InventoryItemBarcodeUpdateWithoutItemInput, InventoryItemBarcodeUncheckedUpdateWithoutItemInput>
  }

  export type InventoryItemBarcodeUpdateManyWithWhereWithoutItemInput = {
    where: InventoryItemBarcodeScalarWhereInput
    data: XOR<InventoryItemBarcodeUpdateManyMutationInput, InventoryItemBarcodeUncheckedUpdateManyWithoutItemInput>
  }

  export type InventoryItemChangeUpsertWithWhereUniqueWithoutItemInput = {
    where: InventoryItemChangeWhereUniqueInput
    update: XOR<InventoryItemChangeUpdateWithoutItemInput, InventoryItemChangeUncheckedUpdateWithoutItemInput>
    create: XOR<InventoryItemChangeCreateWithoutItemInput, InventoryItemChangeUncheckedCreateWithoutItemInput>
  }

  export type InventoryItemChangeUpdateWithWhereUniqueWithoutItemInput = {
    where: InventoryItemChangeWhereUniqueInput
    data: XOR<InventoryItemChangeUpdateWithoutItemInput, InventoryItemChangeUncheckedUpdateWithoutItemInput>
  }

  export type InventoryItemChangeUpdateManyWithWhereWithoutItemInput = {
    where: InventoryItemChangeScalarWhereInput
    data: XOR<InventoryItemChangeUpdateManyMutationInput, InventoryItemChangeUncheckedUpdateManyWithoutItemInput>
  }

  export type InventoryDocumentCreateWithoutBarcodesInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehouse: WarehouseCreateNestedOneWithoutDocsInput
    items?: InventoryItemCreateNestedManyWithoutDocumentInput
    changes?: InventoryItemChangeCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentUncheckedCreateWithoutBarcodesInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseId: string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InventoryItemUncheckedCreateNestedManyWithoutDocumentInput
    changes?: InventoryItemChangeUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentCreateOrConnectWithoutBarcodesInput = {
    where: InventoryDocumentWhereUniqueInput
    create: XOR<InventoryDocumentCreateWithoutBarcodesInput, InventoryDocumentUncheckedCreateWithoutBarcodesInput>
  }

  export type InventoryItemCreateWithoutBarcodesInput = {
    id?: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    document: InventoryDocumentCreateNestedOneWithoutItemsInput
    changes?: InventoryItemChangeCreateNestedManyWithoutItemInput
  }

  export type InventoryItemUncheckedCreateWithoutBarcodesInput = {
    id?: string
    documentId: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    changes?: InventoryItemChangeUncheckedCreateNestedManyWithoutItemInput
  }

  export type InventoryItemCreateOrConnectWithoutBarcodesInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutBarcodesInput, InventoryItemUncheckedCreateWithoutBarcodesInput>
  }

  export type InventoryDocumentUpsertWithoutBarcodesInput = {
    update: XOR<InventoryDocumentUpdateWithoutBarcodesInput, InventoryDocumentUncheckedUpdateWithoutBarcodesInput>
    create: XOR<InventoryDocumentCreateWithoutBarcodesInput, InventoryDocumentUncheckedCreateWithoutBarcodesInput>
    where?: InventoryDocumentWhereInput
  }

  export type InventoryDocumentUpdateToOneWithWhereWithoutBarcodesInput = {
    where?: InventoryDocumentWhereInput
    data: XOR<InventoryDocumentUpdateWithoutBarcodesInput, InventoryDocumentUncheckedUpdateWithoutBarcodesInput>
  }

  export type InventoryDocumentUpdateWithoutBarcodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouse?: WarehouseUpdateOneRequiredWithoutDocsNestedInput
    items?: InventoryItemUpdateManyWithoutDocumentNestedInput
    changes?: InventoryItemChangeUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryDocumentUncheckedUpdateWithoutBarcodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InventoryItemUncheckedUpdateManyWithoutDocumentNestedInput
    changes?: InventoryItemChangeUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryItemUpsertWithoutBarcodesInput = {
    update: XOR<InventoryItemUpdateWithoutBarcodesInput, InventoryItemUncheckedUpdateWithoutBarcodesInput>
    create: XOR<InventoryItemCreateWithoutBarcodesInput, InventoryItemUncheckedCreateWithoutBarcodesInput>
    where?: InventoryItemWhereInput
  }

  export type InventoryItemUpdateToOneWithWhereWithoutBarcodesInput = {
    where?: InventoryItemWhereInput
    data: XOR<InventoryItemUpdateWithoutBarcodesInput, InventoryItemUncheckedUpdateWithoutBarcodesInput>
  }

  export type InventoryItemUpdateWithoutBarcodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: InventoryDocumentUpdateOneRequiredWithoutItemsNestedInput
    changes?: InventoryItemChangeUpdateManyWithoutItemNestedInput
  }

  export type InventoryItemUncheckedUpdateWithoutBarcodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    changes?: InventoryItemChangeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type InventoryDocumentCreateWithoutChangesInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    warehouse: WarehouseCreateNestedOneWithoutDocsInput
    items?: InventoryItemCreateNestedManyWithoutDocumentInput
    barcodes?: InventoryItemBarcodeCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentUncheckedCreateWithoutChangesInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseId: string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    items?: InventoryItemUncheckedCreateNestedManyWithoutDocumentInput
    barcodes?: InventoryItemBarcodeUncheckedCreateNestedManyWithoutDocumentInput
  }

  export type InventoryDocumentCreateOrConnectWithoutChangesInput = {
    where: InventoryDocumentWhereUniqueInput
    create: XOR<InventoryDocumentCreateWithoutChangesInput, InventoryDocumentUncheckedCreateWithoutChangesInput>
  }

  export type InventoryItemCreateWithoutChangesInput = {
    id?: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    document: InventoryDocumentCreateNestedOneWithoutItemsInput
    barcodes?: InventoryItemBarcodeCreateNestedManyWithoutItemInput
  }

  export type InventoryItemUncheckedCreateWithoutChangesInput = {
    id?: string
    documentId: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    barcodes?: InventoryItemBarcodeUncheckedCreateNestedManyWithoutItemInput
  }

  export type InventoryItemCreateOrConnectWithoutChangesInput = {
    where: InventoryItemWhereUniqueInput
    create: XOR<InventoryItemCreateWithoutChangesInput, InventoryItemUncheckedCreateWithoutChangesInput>
  }

  export type InventoryDocumentUpsertWithoutChangesInput = {
    update: XOR<InventoryDocumentUpdateWithoutChangesInput, InventoryDocumentUncheckedUpdateWithoutChangesInput>
    create: XOR<InventoryDocumentCreateWithoutChangesInput, InventoryDocumentUncheckedCreateWithoutChangesInput>
    where?: InventoryDocumentWhereInput
  }

  export type InventoryDocumentUpdateToOneWithWhereWithoutChangesInput = {
    where?: InventoryDocumentWhereInput
    data: XOR<InventoryDocumentUpdateWithoutChangesInput, InventoryDocumentUncheckedUpdateWithoutChangesInput>
  }

  export type InventoryDocumentUpdateWithoutChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouse?: WarehouseUpdateOneRequiredWithoutDocsNestedInput
    items?: InventoryItemUpdateManyWithoutDocumentNestedInput
    barcodes?: InventoryItemBarcodeUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryDocumentUncheckedUpdateWithoutChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseId?: StringFieldUpdateOperationsInput | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InventoryItemUncheckedUpdateManyWithoutDocumentNestedInput
    barcodes?: InventoryItemBarcodeUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryItemUpsertWithoutChangesInput = {
    update: XOR<InventoryItemUpdateWithoutChangesInput, InventoryItemUncheckedUpdateWithoutChangesInput>
    create: XOR<InventoryItemCreateWithoutChangesInput, InventoryItemUncheckedCreateWithoutChangesInput>
    where?: InventoryItemWhereInput
  }

  export type InventoryItemUpdateToOneWithWhereWithoutChangesInput = {
    where?: InventoryItemWhereInput
    data: XOR<InventoryItemUpdateWithoutChangesInput, InventoryItemUncheckedUpdateWithoutChangesInput>
  }

  export type InventoryItemUpdateWithoutChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: InventoryDocumentUpdateOneRequiredWithoutItemsNestedInput
    barcodes?: InventoryItemBarcodeUpdateManyWithoutItemNestedInput
  }

  export type InventoryItemUncheckedUpdateWithoutChangesInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barcodes?: InventoryItemBarcodeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type InventoryDocumentCreateManyWarehouseInput = {
    id?: string
    externalId: string
    onecNumber: string
    onecDate: Date | string
    warehouseCode: string
    status?: $Enums.DocStatus
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryDocumentUpdateWithoutWarehouseInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InventoryItemUpdateManyWithoutDocumentNestedInput
    barcodes?: InventoryItemBarcodeUpdateManyWithoutDocumentNestedInput
    changes?: InventoryItemChangeUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryDocumentUncheckedUpdateWithoutWarehouseInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    items?: InventoryItemUncheckedUpdateManyWithoutDocumentNestedInput
    barcodes?: InventoryItemBarcodeUncheckedUpdateManyWithoutDocumentNestedInput
    changes?: InventoryItemChangeUncheckedUpdateManyWithoutDocumentNestedInput
  }

  export type InventoryDocumentUncheckedUpdateManyWithoutWarehouseInput = {
    id?: StringFieldUpdateOperationsInput | string
    externalId?: StringFieldUpdateOperationsInput | string
    onecNumber?: StringFieldUpdateOperationsInput | string
    onecDate?: DateTimeFieldUpdateOperationsInput | Date | string
    warehouseCode?: StringFieldUpdateOperationsInput | string
    status?: EnumDocStatusFieldUpdateOperationsInput | $Enums.DocStatus
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemCreateManyDocumentInput = {
    id?: string
    sku: string
    name: string
    unit: string
    qtyFrom1C: Decimal | DecimalJsLike | number | string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    deltaQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InventoryItemBarcodeCreateManyDocumentInput = {
    id?: string
    itemId: string
    barcode: string
    isPrimary?: boolean
  }

  export type InventoryItemChangeCreateManyDocumentInput = {
    id?: string
    itemId: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
  }

  export type InventoryItemUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barcodes?: InventoryItemBarcodeUpdateManyWithoutItemNestedInput
    changes?: InventoryItemChangeUpdateManyWithoutItemNestedInput
  }

  export type InventoryItemUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    barcodes?: InventoryItemBarcodeUncheckedUpdateManyWithoutItemNestedInput
    changes?: InventoryItemChangeUncheckedUpdateManyWithoutItemNestedInput
  }

  export type InventoryItemUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sku?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    unit?: StringFieldUpdateOperationsInput | string
    qtyFrom1C?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    deltaQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemBarcodeUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    item?: InventoryItemUpdateOneRequiredWithoutBarcodesNestedInput
  }

  export type InventoryItemBarcodeUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryItemBarcodeUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryItemChangeUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    item?: InventoryItemUpdateOneRequiredWithoutChangesNestedInput
  }

  export type InventoryItemChangeUncheckedUpdateWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemChangeUncheckedUpdateManyWithoutDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    itemId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemBarcodeCreateManyItemInput = {
    id?: string
    documentId: string
    barcode: string
    isPrimary?: boolean
  }

  export type InventoryItemChangeCreateManyItemInput = {
    id?: string
    documentId: string
    deviceId: string
    countedQty?: Decimal | DecimalJsLike | number | string | null
    correctedQty?: Decimal | DecimalJsLike | number | string | null
    note?: string | null
    createdAt?: Date | string
  }

  export type InventoryItemBarcodeUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
    document?: InventoryDocumentUpdateOneRequiredWithoutBarcodesNestedInput
  }

  export type InventoryItemBarcodeUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryItemBarcodeUncheckedUpdateManyWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    barcode?: StringFieldUpdateOperationsInput | string
    isPrimary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type InventoryItemChangeUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    document?: InventoryDocumentUpdateOneRequiredWithoutChangesNestedInput
  }

  export type InventoryItemChangeUncheckedUpdateWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InventoryItemChangeUncheckedUpdateManyWithoutItemInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentId?: StringFieldUpdateOperationsInput | string
    deviceId?: StringFieldUpdateOperationsInput | string
    countedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    correctedQty?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use WarehouseCountOutputTypeDefaultArgs instead
     */
    export type WarehouseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WarehouseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryDocumentCountOutputTypeDefaultArgs instead
     */
    export type InventoryDocumentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryDocumentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryItemCountOutputTypeDefaultArgs instead
     */
    export type InventoryItemCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryItemCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WarehouseDefaultArgs instead
     */
    export type WarehouseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WarehouseDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryDocumentDefaultArgs instead
     */
    export type InventoryDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryItemDefaultArgs instead
     */
    export type InventoryItemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryItemDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryItemBarcodeDefaultArgs instead
     */
    export type InventoryItemBarcodeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryItemBarcodeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use InventoryItemChangeDefaultArgs instead
     */
    export type InventoryItemChangeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InventoryItemChangeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}